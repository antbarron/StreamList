{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState(() => {\n    // Retrieve 'savedLists' from localStorage\n    const lists = JSON.parse(localStorage.getItem('savedLists'));\n    // Set 'savedLists' to an empty array if nothing was stored or if 'lists' is not an array\n    return Array.isArray(lists) ? lists : [];\n  });\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const [editIndex, setEditIndex] = useState(null); // Index of the list being edited\n  const [editedName, setEditedName] = useState(''); // Holds the edited name\n\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n  // Load inputList from localStorage when the component mounts\n  useEffect(() => {\n    const storedList = localStorage.getItem('inputList');\n    if (storedList) {\n      setInputList(JSON.parse(storedList));\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n  useEffect(() => {\n    const lists = JSON.parse(localStorage.getItem('savedLists'));\n    setSavedLists(Array.isArray(lists) ? lists : []); // Make sure 'savedLists' is an array\n  }, []);\n  useEffect(() => {\n    // Retrieve the saved list from local storage and parse it as a JSON object\n    const savedList = JSON.parse(localStorage.getItem('savedList')) || [];\n\n    // Update the input list state with the retrieved saved list\n    setInputList(savedList);\n  }, []); // Empty dependency array ensures this effect runs only once on component mount\n\n  const handleSaveList = () => {\n    // Check if the list name is not empty or just whitespace\n    if (listName.trim()) {\n      // Retrieve existing saved lists from local storage or initialize an empty object\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n\n      // Save the current input list under the specified list name\n      savedLists[listName] = inputList;\n\n      // Update local storage with the new list of saved lists\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n      // Set a success message indicating the list has been saved\n      setMessage('List saved successfully!');\n\n      // Clear the success message after 1 second\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async movieTitle => {\n    try {\n      // Fetch movie details using the title to get the movie ID\n      const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n      const movie = searchResponse.data.results[0]; // Get the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n        const reviews = reviewsResponse.data.results;\n\n        // Navigate to the Movies component and pass reviews and movie title\n        navigate(`/movie/${movieId}`, {\n          state: {\n            reviews,\n            movieTitle\n          }\n        });\n      } else {\n        console.error(\"Movie not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); //avoid page reload\n    if (input.trim()) {\n      // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000); // Remove the message after 1 second\n    }\n  };\n  const handleRemove = id => {\n    // Create a new list by filtering out the item with the specified id\n    const updatedList = inputList.filter(item => item.id !== id);\n\n    // Update the input list state to reflect the new list after removing the item\n    setInputList(updatedList);\n\n    // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n    const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n\n    // Update the saved lists in local storage with the new input list for the current list name\n    savedLists[listName] = updatedList;\n\n    // Save the updated lists back to local storage\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n    // Display a success message indicating that the movie was removed\n    setMessage('Movie removed successfully!');\n\n    // Clear the success message after 1 second for better user experience\n    setTimeout(() => setMessage(''), 1000);\n  };\n  const handleEdit = id => {\n    // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find(item => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);\n    setEditId(id); // Update editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = event => {\n    // Prevent the default form submission behavior\n    event.preventDefault();\n\n    // Check if the edit text is not empty and if there is a valid edit ID\n    if (editText.trim() && editId) {\n      // Create a new list by mapping over the current input list\n      // Update the text of the item that matches the editId\n      const updatedList = inputList.map(item => item.id === editId ? {\n        ...item,\n        text: editText\n      } : item);\n\n      // Update the input list state to the newly updated list\n      setInputList(updatedList);\n\n      // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n\n      // Update the saved lists in local storage with the new input list for the current list name\n      savedLists[listName] = updatedList;\n\n      // Save the updated lists back to local storage\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n      // Clear the edit text input field after the update\n      setEditText('');\n\n      // Reset the edit ID to indicate no current item is being edited\n      setEditId(null);\n\n      // Display a success message indicating that the movie was edited\n      setMessage('Movie edited successfully!');\n\n      // Clear the success message after 1 second for better user experience\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleEditCancel = () => {\n    setEditText(''); // Clear the editText state\n    setEditId(null); // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n  const handleSearchMovie = async movieTitle => {\n    // Fetch search results from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    });\n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = selectedList => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n  // Toggles the edit mode for saved lists\n  const handleEditSavedLists = () => {\n    setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n  };\n  // Removes a saved list from the repository by ID\n  const handleRemoveSavedList = id => {\n    const updatedLists = savedLists.filter(list => list.id !== id); // Remove the list by id\n    setSavedLists(updatedLists); // Update state\n\n    // Update local storage\n    const storedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n    delete storedLists[id]; // Remove from local storage\n    localStorage.setItem('savedLists', JSON.stringify(storedLists));\n  };\n  const handleNameChange = index => {\n    setEditIndex(index); // Set the index of the list being edited\n    setEditedName(savedLists[index].name); // Load the current name into the input\n  };\n  const handleUpdateSavedList = index => {\n    const updatedLists = [...savedLists];\n    updatedLists[index].name = editedName; // Update the name\n    setSavedLists(updatedLists); // Update state\n\n    // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n\n    // Reset the edit state\n    setEditedName('');\n    setEditIndex(null);\n    setEditSavedLists(false); // Optionally close edit mode\n  };\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stream-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), showSaveInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: e => setListName(e.target.value),\n          placeholder: \"Enter List Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSaveList,\n          children: \"Save List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleShowSaveInput,\n        children: \"Save List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleViewSavedLists,\n        children: \"View All Saved Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"input-list\",\n      children: inputList.map(item =>\n      /*#__PURE__*/\n      // iterates over each item in the inputList array.\n      // `item.id` comes from the `id` property of each object in the `inputList` state array,\n      //key prop uses it for each <li> element to optimize list rendering and updates.\n      _jsxDEV(\"li\", {\n        className: \"input-list li\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play-button\",\n            onClick: () => handleSearchMovie(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"slideshow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => handleRemove(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"remove_selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 18\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEdit(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit_square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reviews-button\",\n            onClick: () => handleMovieReviews(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"reviews\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), editId && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"edit-form\",\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText //<input> binds to editText state var React manages and update\n            ,\n            onChange: e => setEditText(e.target.value) // Updates editText state as the user types\n            ,\n            placeholder: \"Edit Movie\",\n            className: \"edit-input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"edit-submit-button\",\n            children: \"Submit Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), showSavedListsModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a Saved List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditSavedLists,\n          children: [editSavedLists ? 'Done Editing' : 'Edit Lists', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: savedLists.map((list, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [editSavedLists && editIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: editedName,\n              onChange: e => setEditedName(e.target.value) // Update state with edited name input\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 29\n            }, this) :\n            /*#__PURE__*/\n            // Button to select and load a saved list\n            _jsxDEV(\"button\", {\n              onClick: () => handleSelectSavedList(list),\n              className: \"saved-list-button\",\n              children: [list.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 29\n            }, this), editSavedLists && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [editIndex === index ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"saved-list-button\",\n                onClick: () => handleUpdateSavedList(index),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 37\n              }, this) // Save updated name\n              :\n              /*#__PURE__*/\n              // Button to initiate name editing for a specific list\n              _jsxDEV(\"button\", {\n                className: \"saved-list-button\",\n                onClick: () => handleNameChange(index),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"edit_square\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRemoveSavedList(list.id),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"remove_selection\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true)]\n          }, list.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSavedListsModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"vWBNcqUkOvf53ltnT/9LIStCw+I=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","v4","uuidv4","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","listName","setListName","showSaveInput","setShowSaveInput","savedLists","setSavedLists","lists","JSON","parse","localStorage","getItem","Array","isArray","showSavedListsModal","setShowSavedListsModal","editSavedLists","setEditSavedLists","editIndex","setEditIndex","editedName","setEditedName","navigate","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","storedList","setItem","stringify","savedList","handleSaveList","trim","setTimeout","handleInputChange","event","target","value","handleMovieReviews","movieTitle","searchResponse","get","encodeURIComponent","movie","data","results","movieId","id","reviewsResponse","reviews","state","console","error","handleSubmit","preventDefault","text","handleRemove","updatedList","filter","item","handleEdit","itemToEdit","find","handleEditSubmit","map","handleEditCancel","handleSearchMovie","response","fetch","json","searchResults","items","handleShowSaveInput","handleViewSavedLists","handleSelectSavedList","selectedList","handleEditSavedLists","handleRemoveSavedList","updatedLists","list","storedLists","handleNameChange","index","name","handleUpdateSavedList","handleGoToCart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","e","onClick","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\n\nconst StreamList = () => {\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState(() => {\n    // Retrieve 'savedLists' from localStorage\n    const lists = JSON.parse(localStorage.getItem('savedLists'));\n    // Set 'savedLists' to an empty array if nothing was stored or if 'lists' is not an array\n    return Array.isArray(lists) ? lists : [];\n});\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const [editIndex, setEditIndex] = useState(null); // Index of the list being edited\nconst [editedName, setEditedName] = useState(''); // Holds the edited name\n\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; \n\n   // Load inputList from localStorage when the component mounts\n   useEffect(() => {\n    const storedList = localStorage.getItem('inputList');\n    if (storedList) {\n      setInputList(JSON.parse(storedList));\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n\n  useEffect(() => {\n    const lists = JSON.parse(localStorage.getItem('savedLists'));\n    setSavedLists(Array.isArray(lists) ? lists : []); // Make sure 'savedLists' is an array\n}, []);\n\n\nuseEffect(() => {\n  // Retrieve the saved list from local storage and parse it as a JSON object\n  const savedList = JSON.parse(localStorage.getItem('savedList')) || [];\n  \n  // Update the input list state with the retrieved saved list\n  setInputList(savedList);\n}, []); // Empty dependency array ensures this effect runs only once on component mount\n\n\nconst handleSaveList = () => {\n  // Check if the list name is not empty or just whitespace\n  if (listName.trim()) {\n      // Retrieve existing saved lists from local storage or initialize an empty object\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      \n      // Save the current input list under the specified list name\n      savedLists[listName] = inputList;\n      \n      // Update local storage with the new list of saved lists\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n      \n      // Set a success message indicating the list has been saved\n      setMessage('List saved successfully!');\n      \n      // Clear the success message after 1 second\n      setTimeout(() => setMessage(''), 1000);\n  }\n};\n\n\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async (movieTitle) => {\n    try {\n        // Fetch movie details using the title to get the movie ID\n        const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n        \n        const movie = searchResponse.data.results[0]; // Get the first search result\n        if (movie) {\n            const movieId = movie.id; // Extract movieId\n            const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n            const reviews = reviewsResponse.data.results;\n\n            // Navigate to the Movies component and pass reviews and movie title\n            navigate(`/movie/${movieId}`, { state: { reviews, movieTitle } });\n        } else {\n            console.error(\"Movie not found\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie reviews:\", error);\n    }\n};\n\n  const handleSubmit = (event) => {\n    event.preventDefault();//avoid page reload\n    if (input.trim()) {\n          // Update the inputList state by adding a new movie object with a unique ID and the entered text\n          setInputList([...inputList, { id: uuidv4(), text: input }]);\n          setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000);// Remove the message after 1 second\n    }\n  };\n\n  const handleRemove = (id) => {\n    // Create a new list by filtering out the item with the specified id\n    const updatedList = inputList.filter(item => item.id !== id);\n    \n    // Update the input list state to reflect the new list after removing the item\n    setInputList(updatedList);\n    \n    // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n    const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n    \n    // Update the saved lists in local storage with the new input list for the current list name\n    savedLists[listName] = updatedList;\n    \n    // Save the updated lists back to local storage\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n    // Display a success message indicating that the movie was removed\n    setMessage('Movie removed successfully!');\n    \n    // Clear the success message after 1 second for better user experience\n    setTimeout(() => setMessage(''), 1000);\n};\n\n\n\n  const handleEdit = (id) => {\n      // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find((item) => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);  \n    setEditId(id);  // Update editId state to track which movie is currently being edited.\n  };\n\n  const handleEditSubmit = (event) => {\n    // Prevent the default form submission behavior\n    event.preventDefault();\n    \n    // Check if the edit text is not empty and if there is a valid edit ID\n    if (editText.trim() && editId) {\n        // Create a new list by mapping over the current input list\n        // Update the text of the item that matches the editId\n        const updatedList = inputList.map(item => \n            item.id === editId ? { ...item, text: editText } : item\n        );\n\n        // Update the input list state to the newly updated list\n        setInputList(updatedList);\n        \n        // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n        const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n        \n        // Update the saved lists in local storage with the new input list for the current list name\n        savedLists[listName] = updatedList;\n        \n        // Save the updated lists back to local storage\n        localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n        // Clear the edit text input field after the update\n        setEditText('');\n        \n        // Reset the edit ID to indicate no current item is being edited\n        setEditId(null);\n        \n        // Display a success message indicating that the movie was edited\n        setMessage('Movie edited successfully!');\n        \n        // Clear the success message after 1 second for better user experience\n        setTimeout(() => setMessage(''), 1000);\n    }\n};\n\n\n\n  const handleEditCancel = () => {\n    setEditText('');// Clear the editText state\n    setEditId(null);  // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n\n  const handleSearchMovie = async (movieTitle) => {\n    // Fetch search results from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); \n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = (selectedList) => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n    // Toggles the edit mode for saved lists\n    const handleEditSavedLists = () => {\n      setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n    };\n     // Removes a saved list from the repository by ID\n     const handleRemoveSavedList = (id) => {\n      const updatedLists = savedLists.filter(list => list.id !== id); // Remove the list by id\n      setSavedLists(updatedLists); // Update state\n  \n      // Update local storage\n      const storedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      delete storedLists[id]; // Remove from local storage\n      localStorage.setItem('savedLists', JSON.stringify(storedLists));\n  };\n  \n  const handleNameChange = (index) => {\n    setEditIndex(index); // Set the index of the list being edited\n    setEditedName(savedLists[index].name); // Load the current name into the input\n  };\n  \n  const handleUpdateSavedList = (index) => {\n    const updatedLists = [...savedLists];\n    updatedLists[index].name = editedName; // Update the name\n    setSavedLists(updatedLists); // Update state\n\n // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n    \n    // Reset the edit state\n    setEditedName(''); \n    setEditIndex(null); \n    setEditSavedLists(false); // Optionally close edit mode\n};\n\n\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n\n  return (\n    <div className=\"stream-list-container\">\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Feedback message */}\n\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Enter Movie\"\n          className=\"input-box\"\n        />\n        <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n        \n\n        {showSaveInput ? (\n        <div>\n          <input\n            type=\"text\"\n            value={listName}\n            onChange={(e) => setListName(e.target.value)}\n            placeholder=\"Enter List Name\"\n          />\n          <button className=\"save-button\" onClick={handleSaveList}>Save List</button>\n        </div>\n      ) : (\n        <button className=\"save-button\" onClick={handleShowSaveInput}>Save List</button>\n      )}\n      <button className=\"save-button\" onClick={handleViewSavedLists}>View All Saved Lists</button>\n      </form>\n      <ul className=\"input-list\">\n        {inputList.map((item) => (// iterates over each item in the inputList array.\n         // `item.id` comes from the `id` property of each object in the `inputList` state array,\n        //key prop uses it for each <li> element to optimize list rendering and updates.\n         <li key={item.id} className=\"input-list li\">\n      {/* Displays the text of the movie */}\n      <span>{item.text}</span>\n            <div className=\"button-container\">\n              <button className=\"play-button\" onClick={() => handleSearchMovie(item.text)}>\n              <span className=\"material-symbols-outlined\">slideshow</span> </button>\n              <button className=\"remove-button\" onClick={() => handleRemove(item.id)}> \n                 <span className=\"material-symbols-outlined\">remove_selection</span> </button>\n              <button className=\"edit-button\" onClick={() => handleEdit(item.id)}>\n              <span className=\"material-symbols-outlined\">edit_square</span> </button>\n              <button className=\"reviews-button\" onClick={() => handleMovieReviews(item.text)}>\n              <span className=\"material-symbols-outlined\">reviews</span> </button>\n            </div>\n        {/* Edit form (only visible when editing an item) */}\n        {editId && (\n        <form className=\"edit-form\" onSubmit={handleEditSubmit}>\n          <input\n            type=\"text\"\n            value={editText}//<input> binds to editText state var React manages and update\n            onChange={(e) => setEditText(e.target.value)}// Updates editText state as the user types\n            placeholder=\"Edit Movie\"\n            className=\"edit-input-box\"\n          />\n          <button type=\"submit\" className=\"edit-submit-button\">Submit Edit</button>\n          <button type=\"button\" className=\"cancel-button\" onClick={handleEditCancel}>Cancel</button>\n        </form>\n        )}\n        </li>\n        ))}\n      </ul>\n\n     {/* Saved Lists Modal - Displays a modal for selecting or editing saved lists */}\n{showSavedListsModal && (\n    <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n            <h2>Select a Saved List</h2>\n            {/* Button to toggle between edit and view modes for saved lists */}\n            <button onClick={handleEditSavedLists}>\n                {editSavedLists ? 'Done Editing' : 'Edit Lists'} {/* Changes button text based on the current mode */}\n            </button>\n\n            {/* List of saved lists */}\n            <ul>\n                {savedLists.map((list, index) => (\n                    <li key={list.id}>\n                        {/* Render input field for name editing if in edit mode and selected index matches */}\n                        {editSavedLists && editIndex === index ? (\n                            <input \n                                type=\"text\" \n                                value={editedName} \n                                onChange={(e) => setEditedName(e.target.value)} // Update state with edited name input\n                            />\n                        ) : (\n                            // Button to select and load a saved list\n                            <button \n                                onClick={() => handleSelectSavedList(list)} \n                                className=\"saved-list-button\"\n                            >\n                                {list.name} {/* Display the saved list name */}\n                            </button>\n                        )}\n\n                        {/* Conditional render of edit and remove options when in edit mode */}\n                        {editSavedLists && (\n                            <>\n                                {/* Save button appears when editing the name of a specific list */}\n                                {editIndex === index ? (\n                                    <button \n                                        className=\"saved-list-button\" \n                                        onClick={() => handleUpdateSavedList(index)}>Save</button> // Save updated name\n                                ) : (\n                                    // Button to initiate name editing for a specific list\n                                    <button \n                                        className=\"saved-list-button\" \n                                        onClick={() => handleNameChange(index)}>\n                                        <span className=\"material-symbols-outlined\">edit_square</span>\n                                    </button>\n                                )}\n\n                                {/* Button to remove the selected saved list */}\n                                <button \n                                    onClick={() => handleRemoveSavedList(list.id)}>\n                                    <span className=\"material-symbols-outlined\">remove_selection</span>\n                                </button>\n                            </>\n                        )}\n                    </li>\n                ))}\n            </ul>\n\n            {/* Close button to exit the modal and return to the main view */}\n            <button onClick={() => setShowSavedListsModal(false)}>Close</button>\n        </div>\n    </div>\n)}\n\n\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}