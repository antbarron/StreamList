{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  // State to handle various aspects of the component\n  const [input, setInput] = useState(''); // Tracks the current input text for new movie entries\n  const [inputList, setInputList] = useState([]); // Stores the list of movie items entered by the user\n  const [editText, setEditText] = useState(''); // Stores the text to edit the selected movie item\n  const [editId, setEditId] = useState(null); // Keeps track of the movie item being edited by its ID\n  const [message, setMessage] = useState(''); // Temporary message for user feedback (e.g., \"Movie added\")\n  const [listName, setListName] = useState(''); // Tracks the name for the saved list\n  const [showSaveInput, setShowSaveInput] = useState(false); // Controls visibility of list name input field\n  const [savedLists, setSavedLists] = useState([]); // Stores all saved lists from local storage\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Controls modal visibility for saved lists\n  const navigate = useNavigate(); // Hook to navigate between routes\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; // Access YouTube API key from environment variables\n\n  // Load inputList from localStorage when the component mounts\n  useEffect(() => {\n    const storedList = localStorage.getItem('inputList'); // Retrieve saved input list from localStorage\n    if (storedList) {\n      setInputList(JSON.parse(storedList)); // Set inputList state with parsed data\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList)); // Update localStorage on inputList change\n  }, [inputList]);\n\n  // Load saved lists from local storage on component mount\n  useEffect(() => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || []; // Retrieve saved lists or set empty array\n    setSavedLists(lists); // Set saved lists state\n  }, []);\n\n  // Handles saving the current list with a specified name\n  const handleSaveList = () => {\n    if (listName.trim() && inputList.length) {\n      // Ensure list name and items are not empty\n      const newList = {\n        id: uuidv4(),\n        name: listName,\n        items: inputList\n      }; // Create new list object with ID\n      const updatedLists = [...savedLists, newList]; // Add new list to saved lists\n      setSavedLists(updatedLists); // Update saved lists state\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists)); // Persist to localStorage\n      setListName(''); // Reset list name input\n      setInputList([]); // Clear current list items\n      setShowSaveInput(false); // Hide the save input field\n      alert('List saved successfully!'); // Feedback alert for successful save\n    }\n  };\n\n  // Handles changes to the input field for entering new movies\n  const handleInputChange = event => {\n    setInput(event.target.value); // Update input state with user input\n  };\n\n  // Fetches reviews for the specified movie and navigates to movie reviews page\n  const handleMovieReviews = async movieTitle => {\n    try {\n      // Fetch movie details by title to get movie ID\n      const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n      const movie = searchResponse.data.results[0]; // Select the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId for further API call\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n        const reviews = reviewsResponse.data.results; // Store fetched reviews\n        navigate(`/movie/${movieId}`, {\n          state: {\n            reviews,\n            movieTitle\n          }\n        }); // Navigate to movie reviews page\n      } else {\n        console.error(\"Movie not found\"); // Error log if movie is not found\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error); // Error log for API failure\n    }\n  };\n\n  // Adds a new movie to the input list when form is submitted\n  const handleSubmit = event => {\n    event.preventDefault(); // Prevent form submission from reloading the page\n    if (input.trim()) {\n      // Ensure input is not empty\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]); // Add new movie with unique ID\n      setInput(''); // Clear input field\n      setMessage('Movie added successfully!'); // Feedback message\n      setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n    }\n  };\n\n  // Removes a movie from the input list by ID\n  const handleRemove = id => {\n    setInputList(inputList.filter(item => item.id !== id)); // Filter out movie by ID\n    setMessage('Movie removed successfully!'); // Feedback message\n    setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n  };\n\n  // Initiates the editing process for a specific movie item\n  const handleEdit = id => {\n    const itemToEdit = inputList.find(item => item.id === id); // Locate movie by ID\n    setEditText(itemToEdit.text); // Set the current text to edit\n    setEditId(id); // Track which item is being edited\n  };\n\n  // Handles form submission for editing a movie item\n  const handleEditSubmit = event => {\n    event.preventDefault(); // Prevent form from reloading the page\n    if (editText.trim() && editId) {\n      // Ensure edit text and ID are valid\n      setInputList(inputList.map(item => item.id === editId ? {\n        ...item,\n        text: editText\n      } : item // Update text if IDs match\n      ));\n      setEditText(''); // Clear edit text input\n      setEditId(null); // Reset edit ID\n      setMessage('Movie edited successfully!'); // Feedback message\n      setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n    }\n  };\n\n  // Cancels the editing process and clears relevant states\n  const handleEditCancel = () => {\n    setEditText(''); // Clear edit text\n    setEditId(null); // Reset edit ID\n  };\n\n  // Searches for movie trailers on YouTube by title\n  const handleSearchMovie = async movieTitle => {\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    const data = await response.json(); // Parse response data\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    }); // Navigate to movie details\n  };\n\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = selectedList => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n\n  // Navigate to cart page\n  const handleGoToCart = () => {\n    navigate('/cart'); // Route user to cart component\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stream-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), showSaveInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: e => setListName(e.target.value),\n          placeholder: \"Enter List Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveList,\n          children: \"Save List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShowSaveInput,\n        children: \"Save List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleViewSavedLists,\n        children: \"View Saved Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoToCart,\n        children: \"Go to Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), showSavedListsModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"saved-lists-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Saved Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: savedLists.map(list => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [list.name, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSelectSavedList(list),\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this)]\n        }, list.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowSavedListsModal(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movie-list\",\n      children: inputList.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"movie-item\",\n        children: editId === item.id ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText,\n            onChange: e => setEditText(e.target.value),\n            placeholder: \"Edit movie title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEdit(item.id),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemove(item.id),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMovieReviews(item.text),\n            children: \"Reviews\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSearchMovie(item.text),\n            children: \"Trailer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"FkSXk+b19VvDfG8BzVNOeqLC0QY=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","v4","uuidv4","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","listName","setListName","showSaveInput","setShowSaveInput","savedLists","setSavedLists","showSavedListsModal","setShowSavedListsModal","navigate","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","storedList","localStorage","getItem","JSON","parse","setItem","stringify","lists","handleSaveList","trim","length","newList","id","name","items","updatedLists","alert","handleInputChange","event","target","value","handleMovieReviews","movieTitle","searchResponse","get","encodeURIComponent","movie","data","results","movieId","reviewsResponse","reviews","state","console","error","handleSubmit","preventDefault","text","setTimeout","handleRemove","filter","item","handleEdit","itemToEdit","find","handleEditSubmit","map","handleEditCancel","handleSearchMovie","response","fetch","json","searchResults","handleShowSaveInput","handleViewSavedLists","handleSelectSavedList","selectedList","handleGoToCart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","e","onClick","list","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\n\nconst StreamList = () => {\n  // State to handle various aspects of the component\n  const [input, setInput] = useState(''); // Tracks the current input text for new movie entries\n  const [inputList, setInputList] = useState([]); // Stores the list of movie items entered by the user\n  const [editText, setEditText] = useState(''); // Stores the text to edit the selected movie item\n  const [editId, setEditId] = useState(null); // Keeps track of the movie item being edited by its ID\n  const [message, setMessage] = useState(''); // Temporary message for user feedback (e.g., \"Movie added\")\n  const [listName, setListName] = useState(''); // Tracks the name for the saved list\n  const [showSaveInput, setShowSaveInput] = useState(false); // Controls visibility of list name input field\n  const [savedLists, setSavedLists] = useState([]); // Stores all saved lists from local storage\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Controls modal visibility for saved lists\n  const navigate = useNavigate(); // Hook to navigate between routes\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; // Access YouTube API key from environment variables\n\n  // Load inputList from localStorage when the component mounts\n  useEffect(() => {\n    const storedList = localStorage.getItem('inputList'); // Retrieve saved input list from localStorage\n    if (storedList) {\n      setInputList(JSON.parse(storedList)); // Set inputList state with parsed data\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList)); // Update localStorage on inputList change\n  }, [inputList]);\n\n  // Load saved lists from local storage on component mount\n  useEffect(() => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || []; // Retrieve saved lists or set empty array\n    setSavedLists(lists); // Set saved lists state\n  }, []);\n\n  // Handles saving the current list with a specified name\n  const handleSaveList = () => {\n    if (listName.trim() && inputList.length) { // Ensure list name and items are not empty\n      const newList = { id: uuidv4(), name: listName, items: inputList }; // Create new list object with ID\n      const updatedLists = [...savedLists, newList]; // Add new list to saved lists\n      setSavedLists(updatedLists); // Update saved lists state\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists)); // Persist to localStorage\n      setListName(''); // Reset list name input\n      setInputList([]); // Clear current list items\n      setShowSaveInput(false); // Hide the save input field\n      alert('List saved successfully!'); // Feedback alert for successful save\n    }\n  };\n\n  // Handles changes to the input field for entering new movies\n  const handleInputChange = (event) => {\n    setInput(event.target.value); // Update input state with user input\n  };\n\n  // Fetches reviews for the specified movie and navigates to movie reviews page\n  const handleMovieReviews = async (movieTitle) => {\n    try {\n      // Fetch movie details by title to get movie ID\n      const searchResponse = await axios.get(\n        `https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`\n      );\n      const movie = searchResponse.data.results[0]; // Select the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId for further API call\n        const reviewsResponse = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`\n        );\n        const reviews = reviewsResponse.data.results; // Store fetched reviews\n        navigate(`/movie/${movieId}`, { state: { reviews, movieTitle } }); // Navigate to movie reviews page\n      } else {\n        console.error(\"Movie not found\"); // Error log if movie is not found\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error); // Error log for API failure\n    }\n  };\n\n  // Adds a new movie to the input list when form is submitted\n  const handleSubmit = (event) => {\n    event.preventDefault(); // Prevent form submission from reloading the page\n    if (input.trim()) { // Ensure input is not empty\n      setInputList([...inputList, { id: uuidv4(), text: input }]); // Add new movie with unique ID\n      setInput(''); // Clear input field\n      setMessage('Movie added successfully!'); // Feedback message\n      setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n    }\n  };\n\n  // Removes a movie from the input list by ID\n  const handleRemove = (id) => {\n    setInputList(inputList.filter((item) => item.id !== id)); // Filter out movie by ID\n    setMessage('Movie removed successfully!'); // Feedback message\n    setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n  };\n\n  // Initiates the editing process for a specific movie item\n  const handleEdit = (id) => {\n    const itemToEdit = inputList.find((item) => item.id === id); // Locate movie by ID\n    setEditText(itemToEdit.text); // Set the current text to edit\n    setEditId(id); // Track which item is being edited\n  };\n\n  // Handles form submission for editing a movie item\n  const handleEditSubmit = (event) => {\n    event.preventDefault(); // Prevent form from reloading the page\n    if (editText.trim() && editId) { // Ensure edit text and ID are valid\n      setInputList(inputList.map((item) => \n        item.id === editId ? { ...item, text: editText } : item // Update text if IDs match\n      ));\n      setEditText(''); // Clear edit text input\n      setEditId(null); // Reset edit ID\n      setMessage('Movie edited successfully!'); // Feedback message\n      setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n    }\n  };\n\n  // Cancels the editing process and clears relevant states\n  const handleEditCancel = () => {\n    setEditText(''); // Clear edit text\n    setEditId(null); // Reset edit ID\n  };\n\n  // Searches for movie trailers on YouTube by title\n  const handleSearchMovie = async (movieTitle) => {\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    const data = await response.json(); // Parse response data\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); // Navigate to movie details\n  };\n\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = (selectedList) => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n\n  // Navigate to cart page\n  const handleGoToCart = () => {\n    navigate('/cart'); // Route user to cart component\n  };\n\n  return (\n    <div className=\"stream-list-container\">\n      {/* Header Section */}\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Displays temporary feedback message */}\n\n      {/* Input Form */}\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Enter Movie\"\n          className=\"input-box\"\n        />\n        <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n\n        {showSaveInput ? (\n          <div>\n            <input\n              type=\"text\"\n              value={listName}\n              onChange={(e) => setListName(e.target.value)}\n              placeholder=\"Enter List Name\"\n            />\n            <button onClick={handleSaveList}>Save List</button>\n          </div>\n        ) : (\n          <button onClick={handleShowSaveInput}>Save List</button>\n        )}\n        <button onClick={handleViewSavedLists}>View Saved Lists</button>\n        <button onClick={handleGoToCart}>Go to Cart</button>\n      </form>\n\n      {/* Displaying List of Saved Lists */}\n      {showSavedListsModal && (\n        <div className=\"saved-lists-modal\">\n          <h2>Saved Lists</h2>\n          <ul>\n            {savedLists.map((list) => (\n              <li key={list.id}>\n                {list.name}\n                <button onClick={() => handleSelectSavedList(list)}>Select</button>\n              </li>\n            ))}\n          </ul>\n          <button onClick={() => setShowSavedListsModal(false)}>Close</button>\n        </div>\n      )}\n\n      {/* Display of Movie List */}\n      <ul className=\"movie-list\">\n        {inputList.map((item) => (\n          <li key={item.id} className=\"movie-item\">\n            {/* Conditional Rendering for Edit Mode */}\n            {editId === item.id ? (\n              <form onSubmit={handleEditSubmit}>\n                <input\n                  type=\"text\"\n                  value={editText}\n                  onChange={(e) => setEditText(e.target.value)}\n                  placeholder=\"Edit movie title\"\n                />\n                <button type=\"submit\">Save</button>\n                <button type=\"button\" onClick={handleEditCancel}>Cancel</button>\n              </form>\n            ) : (\n              <>\n                <span>{item.text}</span>\n                <button onClick={() => handleEdit(item.id)}>Edit</button>\n                <button onClick={() => handleRemove(item.id)}>Remove</button>\n                <button onClick={() => handleMovieReviews(item.text)}>Reviews</button>\n                <button onClick={() => handleSearchMovie(item.text)}>Trailer</button>\n              </>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}