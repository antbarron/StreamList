{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState([]);\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const [editIndex, setEditIndex] = useState(null); // Index of the list being edited\n  const [editedName, setEditedName] = useState(''); // Holds the edited name\n\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n  // Load inputList and savedLists from localStorage on component mount\n  useEffect(() => {\n    const storedInputList = JSON.parse(localStorage.getItem('inputList')) || [];\n    const storedSavedLists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    console.log(\"Loaded inputList from localStorage:\", storedInputList);\n    console.log(\"Loaded savedLists from localStorage:\", storedSavedLists);\n    setInputList(storedInputList);\n    setSavedLists(storedSavedLists);\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    console.log(\"Saving inputList to localStorage:\", inputList);\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n\n  // Save savedLists to localStorage whenever it changes\n  useEffect(() => {\n    console.log(\"Saving savedLists to localStorage:\", savedLists);\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n  }, [savedLists]);\n  const handleSaveList = () => {\n    console.log('handleSaveList triggered');\n    if (listName.trim()) {\n      const newList = {\n        id: uuidv4(),\n        name: listName,\n        items: inputList\n      };\n      setSavedLists(prevLists => {\n        const updatedLists = [...prevLists, newList];\n\n        // Log to check the updated lists array\n        console.log(\"Updated savedLists state:\", updatedLists);\n\n        // Show success message immediately after updating\n        setMessage('List saved successfully!');\n        setTimeout(() => setMessage(''), 2000);\n        return updatedLists;\n      });\n\n      // Clear list name and input list\n      setListName('');\n      setInputList([]);\n    } else {\n      console.error(\"List name is empty or invalid.\");\n    }\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async movieTitle => {\n    try {\n      // Fetch movie details using the title to get the movie ID\n      const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n      const movie = searchResponse.data.results[0]; // Get the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n        const reviews = reviewsResponse.data.results;\n\n        // Navigate to the Movies component and pass reviews and movie title\n        navigate(`/movie/${movieId}`, {\n          state: {\n            reviews,\n            movieTitle\n          }\n        });\n      } else {\n        console.error(\"Movie not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); //avoid page reload\n    if (input.trim()) {\n      // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000); // Remove the message after 1 second\n    }\n  };\n  const handleRemove = id => {\n    // Create a new list by filtering out the item with the specified id\n    const updatedList = inputList.filter(item => item.id !== id);\n\n    // Update the input list state to reflect the new list after removing the item\n    setInputList(updatedList);\n    updateSavedListItems(); // Update saved list items after removal\n\n    // Display a success message indicating that the movie was removed\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n  const handleEdit = id => {\n    // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find(item => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);\n    setEditId(id); // Update editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = event => {\n    // Prevent the default form submission behavior\n    event.preventDefault();\n\n    // Check if the edit text is not empty and if there is a valid edit ID\n    if (editText.trim() && editId) {\n      // Create a new list by mapping over the current input list\n      // Update the text of the item that matches the editId\n      const updatedList = inputList.map(item => item.id === editId ? {\n        ...item,\n        text: editText\n      } : item);\n\n      // Update the input list state to the newly updated list\n      setInputList(updatedList);\n\n      // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n\n      // Update the saved lists in local storage with the new input list for the current list name\n      savedLists[listName] = updatedList;\n\n      // Save the updated lists back to local storage\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n      // Clear the edit text input field after the update\n      setEditText('');\n\n      // Reset the edit ID to indicate no current item is being edited\n      setEditId(null);\n\n      // Display a success message indicating that the movie was edited\n      setMessage('Movie edited successfully!');\n\n      // Clear the success message after 1 second for better user experience\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleEditCancel = () => {\n    setEditText(''); // Clear the editText state\n    setEditId(null); // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n  const handleSearchMovie = async movieTitle => {\n    // Fetch search results from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    });\n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n  const handleViewSavedLists = () => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    setSavedLists(lists);\n    console.log('Loaded savedLists:', lists);\n    setShowSavedListsModal(true);\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = selectedList => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n  // Toggles the edit mode for saved lists\n  const handleEditSavedLists = () => {\n    setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n  };\n  // Removes a saved list from the repository by ID\n  const handleRemoveSavedList = id => {\n    const updatedLists = savedLists.filter(list => list.id !== id); // Remove the list by id\n    setSavedLists(updatedLists); // Update state\n\n    // Update local storage\n    const storedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n    delete storedLists[id]; // Remove from local storage\n    localStorage.setItem('savedLists', JSON.stringify(storedLists));\n  };\n  const handleNameChange = index => {\n    setEditIndex(index); // Set the index of the list being edited\n    setEditedName(savedLists[index].name); // Load the current name into the input\n  };\n  const handleUpdateSavedList = index => {\n    const updatedLists = [...savedLists];\n    updatedLists[index].name = editedName; // Update the name\n    setSavedLists(updatedLists); // Update state\n\n    // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n\n    // Reset the edit state\n    setEditedName('');\n    setEditIndex(null);\n    setEditSavedLists(false); // Optionally close edit mode\n  };\n\n  // Make sure to call this function when an item is removed or edited\n  const updateSavedListItems = () => {\n    const currentListIndex = savedLists.findIndex(list => list.id === listName); // Find index of the current list\n    if (currentListIndex !== -1) {\n      const updatedLists = [...savedLists];\n      updatedLists[currentListIndex].items = inputList; // Update the items in the saved list\n      setSavedLists(updatedLists); // Update state\n\n      // Update local storage\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n    }\n  };\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stream-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), showSaveInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: e => setListName(e.target.value),\n          placeholder: \"Enter List Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSaveList,\n          children: \"Save List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleShowSaveInput,\n        children: \"Save List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleViewSavedLists,\n        children: \"View All Saved Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"input-list\",\n      children: inputList.map(item =>\n      /*#__PURE__*/\n      // iterates over each item in the inputList array.\n      // `item.id` comes from the `id` property of each object in the `inputList` state array,\n      //key prop uses it for each <li> element to optimize list rendering and updates.\n      _jsxDEV(\"li\", {\n        className: \"input-list li\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play-button\",\n            onClick: () => handleSearchMovie(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"slideshow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => handleRemove(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"remove_selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 18\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEdit(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit_square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reviews-button\",\n            onClick: () => handleMovieReviews(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"reviews\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), editId && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"edit-form\",\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText //<input> binds to editText state var React manages and update\n            ,\n            onChange: e => setEditText(e.target.value) // Updates editText state as the user types\n            ,\n            placeholder: \"Edit Movie\",\n            className: \"edit-input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"edit-submit-button\",\n            children: \"Submit Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), showSavedListsModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a Saved List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditSavedLists,\n          children: [editSavedLists ? 'Done Editing' : 'Edit Lists', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Array.isArray(savedLists) && savedLists.length > 0 ? savedLists.map((list, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSelectSavedList(list),\n              children: list.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), editSavedLists && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [editIndex === index ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"saved-list-button\",\n                onClick: () => handleUpdateSavedList(index),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 29\n              }, this) :\n              /*#__PURE__*/\n              // Button to initiate name editing for a specific list\n              _jsxDEV(\"button\", {\n                className: \"saved-list-button\",\n                onClick: () => handleNameChange(index),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"edit_square\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"saved-list-button\",\n                onClick: () => handleRemoveSavedList(list.id),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"remove_selection\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No saved lists available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSavedListsModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"ZbuvEsyD2LyR9rZigERf2R9wSeM=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","v4","uuidv4","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","listName","setListName","showSaveInput","setShowSaveInput","savedLists","setSavedLists","showSavedListsModal","setShowSavedListsModal","editSavedLists","setEditSavedLists","editIndex","setEditIndex","editedName","setEditedName","navigate","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","storedInputList","JSON","parse","localStorage","getItem","storedSavedLists","console","log","setItem","stringify","handleSaveList","trim","newList","id","name","items","prevLists","updatedLists","setTimeout","error","handleInputChange","event","target","value","handleMovieReviews","movieTitle","searchResponse","get","encodeURIComponent","movie","data","results","movieId","reviewsResponse","reviews","state","handleSubmit","preventDefault","text","handleRemove","updatedList","filter","item","updateSavedListItems","handleEdit","itemToEdit","find","handleEditSubmit","map","handleEditCancel","handleSearchMovie","response","fetch","json","searchResults","handleShowSaveInput","handleViewSavedLists","lists","handleSelectSavedList","selectedList","handleEditSavedLists","handleRemoveSavedList","list","storedLists","handleNameChange","index","handleUpdateSavedList","currentListIndex","findIndex","handleGoToCart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","e","onClick","Array","isArray","length","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\n\nconst StreamList = () => {\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState([]);\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const [editIndex, setEditIndex] = useState(null); // Index of the list being edited\nconst [editedName, setEditedName] = useState(''); // Holds the edited name\n\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; \n\n  // Load inputList and savedLists from localStorage on component mount\n  useEffect(() => {\n    const storedInputList = JSON.parse(localStorage.getItem('inputList')) || [];\n    const storedSavedLists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    \n    console.log(\"Loaded inputList from localStorage:\", storedInputList);\n    console.log(\"Loaded savedLists from localStorage:\", storedSavedLists);\n    \n    setInputList(storedInputList);\n    setSavedLists(storedSavedLists);\n}, []);\n\n// Save inputList to localStorage whenever it changes\nuseEffect(() => {\n    console.log(\"Saving inputList to localStorage:\", inputList);\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n}, [inputList]);\n\n// Save savedLists to localStorage whenever it changes\nuseEffect(() => {\n    console.log(\"Saving savedLists to localStorage:\", savedLists);\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n}, [savedLists]);\n\nconst handleSaveList = () => {\n  console.log('handleSaveList triggered');\n  if (listName.trim()) {\n      const newList = {\n          id: uuidv4(),\n          name: listName,\n          items: inputList,\n      };\n      \n      setSavedLists(prevLists => {\n          const updatedLists = [...prevLists, newList];\n          \n          // Log to check the updated lists array\n          console.log(\"Updated savedLists state:\", updatedLists);\n          \n          // Show success message immediately after updating\n          setMessage('List saved successfully!');\n          setTimeout(() => setMessage(''), 2000);\n\n          return updatedLists;\n      });\n\n      // Clear list name and input list\n      setListName('');\n      setInputList([]);\n  } else {\n      console.error(\"List name is empty or invalid.\");\n  }\n};\n\n\n\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async (movieTitle) => {\n    try {\n        // Fetch movie details using the title to get the movie ID\n        const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n        \n        const movie = searchResponse.data.results[0]; // Get the first search result\n        if (movie) {\n            const movieId = movie.id; // Extract movieId\n            const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n            const reviews = reviewsResponse.data.results;\n\n            // Navigate to the Movies component and pass reviews and movie title\n            navigate(`/movie/${movieId}`, { state: { reviews, movieTitle } });\n        } else {\n            console.error(\"Movie not found\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie reviews:\", error);\n    }\n};\n\n  const handleSubmit = (event) => {\n    event.preventDefault();//avoid page reload\n    if (input.trim()) {\n          // Update the inputList state by adding a new movie object with a unique ID and the entered text\n          setInputList([...inputList, { id: uuidv4(), text: input }]);\n          setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000);// Remove the message after 1 second\n    }\n  };\n\n  const handleRemove = (id) => {\n    // Create a new list by filtering out the item with the specified id\n    const updatedList = inputList.filter(item => item.id !== id);\n    \n    // Update the input list state to reflect the new list after removing the item\n    setInputList(updatedList);\n    updateSavedListItems(); // Update saved list items after removal\n  \n    // Display a success message indicating that the movie was removed\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n\n\n  const handleEdit = (id) => {\n      // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find((item) => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);  \n    setEditId(id);  // Update editId state to track which movie is currently being edited.\n  };\n\n  const handleEditSubmit = (event) => {\n    // Prevent the default form submission behavior\n    event.preventDefault();\n    \n    // Check if the edit text is not empty and if there is a valid edit ID\n    if (editText.trim() && editId) {\n        // Create a new list by mapping over the current input list\n        // Update the text of the item that matches the editId\n        const updatedList = inputList.map(item => \n            item.id === editId ? { ...item, text: editText } : item\n        );\n\n        // Update the input list state to the newly updated list\n        setInputList(updatedList);\n        \n        // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n        const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n        \n        // Update the saved lists in local storage with the new input list for the current list name\n        savedLists[listName] = updatedList;\n        \n        // Save the updated lists back to local storage\n        localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n        // Clear the edit text input field after the update\n        setEditText('');\n        \n        // Reset the edit ID to indicate no current item is being edited\n        setEditId(null);\n        \n        // Display a success message indicating that the movie was edited\n        setMessage('Movie edited successfully!');\n        \n        // Clear the success message after 1 second for better user experience\n        setTimeout(() => setMessage(''), 1000);\n    }\n};\n\n\n\n  const handleEditCancel = () => {\n    setEditText('');// Clear the editText state\n    setEditId(null);  // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n\n  const handleSearchMovie = async (movieTitle) => {\n    // Fetch search results from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); \n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  const handleViewSavedLists = () => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    setSavedLists(lists);\n    console.log('Loaded savedLists:', lists);\n    setShowSavedListsModal(true);\n};\n\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = (selectedList) => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n    // Toggles the edit mode for saved lists\n    const handleEditSavedLists = () => {\n      setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n    };\n     // Removes a saved list from the repository by ID\n     const handleRemoveSavedList = (id) => {\n      const updatedLists = savedLists.filter(list => list.id !== id); // Remove the list by id\n      setSavedLists(updatedLists); // Update state\n  \n      // Update local storage\n      const storedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      delete storedLists[id]; // Remove from local storage\n      localStorage.setItem('savedLists', JSON.stringify(storedLists));\n  };\n  \n  const handleNameChange = (index) => {\n    setEditIndex(index); // Set the index of the list being edited\n    setEditedName(savedLists[index].name); // Load the current name into the input\n  };\n  \n  const handleUpdateSavedList = (index) => {\n    const updatedLists = [...savedLists];\n    updatedLists[index].name = editedName; // Update the name\n    setSavedLists(updatedLists); // Update state\n\n // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n    \n    // Reset the edit state\n    setEditedName(''); \n    setEditIndex(null); \n    setEditSavedLists(false); // Optionally close edit mode\n};\n\n// Make sure to call this function when an item is removed or edited\nconst updateSavedListItems = () => {\n  const currentListIndex = savedLists.findIndex(list => list.id === listName); // Find index of the current list\n  if (currentListIndex !== -1) {\n    const updatedLists = [...savedLists];\n    updatedLists[currentListIndex].items = inputList; // Update the items in the saved list\n    setSavedLists(updatedLists); // Update state\n\n    // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n  }\n};\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n\n  return (\n    <div className=\"stream-list-container\">\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Feedback message */}\n\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Enter Movie\"\n          className=\"input-box\"\n        />\n        <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n        \n\n        {showSaveInput ? (\n        <div>\n          <input\n            type=\"text\"\n            value={listName}\n            onChange={(e) => setListName(e.target.value)}\n            placeholder=\"Enter List Name\"\n          />\n          <button className=\"save-button\" onClick={handleSaveList}>Save List</button>\n        </div>\n      ) : (\n        <button className=\"save-button\" onClick={handleShowSaveInput}>Save List</button>\n      )}\n      <button className=\"save-button\" onClick={handleViewSavedLists}>View All Saved Lists</button>\n      </form>\n      <ul className=\"input-list\">\n        {inputList.map((item) => (// iterates over each item in the inputList array.\n         // `item.id` comes from the `id` property of each object in the `inputList` state array,\n        //key prop uses it for each <li> element to optimize list rendering and updates.\n         <li key={item.id} className=\"input-list li\">\n      {/* Displays the text of the movie */}\n      <span>{item.text}</span>\n            <div className=\"button-container\">\n              <button className=\"play-button\" onClick={() => handleSearchMovie(item.text)}>\n              <span className=\"material-symbols-outlined\">slideshow</span> </button>\n              <button className=\"remove-button\" onClick={() => handleRemove(item.id)}> \n                 <span className=\"material-symbols-outlined\">remove_selection</span> </button>\n              <button className=\"edit-button\" onClick={() => handleEdit(item.id)}>\n              <span className=\"material-symbols-outlined\">edit_square</span> </button>\n              <button className=\"reviews-button\" onClick={() => handleMovieReviews(item.text)}>\n              <span className=\"material-symbols-outlined\">reviews</span> </button>\n            </div>\n        {/* Edit form (only visible when editing an item) */}\n        {editId && (\n        <form className=\"edit-form\" onSubmit={handleEditSubmit}>\n          <input\n            type=\"text\"\n            value={editText}//<input> binds to editText state var React manages and update\n            onChange={(e) => setEditText(e.target.value)}// Updates editText state as the user types\n            placeholder=\"Edit Movie\"\n            className=\"edit-input-box\"\n          />\n          <button type=\"submit\" className=\"edit-submit-button\">Submit Edit</button>\n          <button type=\"button\" className=\"cancel-button\" onClick={handleEditCancel}>Cancel</button>\n        </form>\n        )}\n        </li>\n        ))}\n      </ul>\n\n     {/* Saved Lists Modal - Displays a modal for selecting or editing saved lists */}\n{showSavedListsModal && (\n    <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n            <h2>Select a Saved List</h2>\n            {/* Button to toggle between edit and view modes for saved lists */}\n            <button onClick={handleEditSavedLists}>\n                {editSavedLists ? 'Done Editing' : 'Edit Lists'} {/* Changes button text based on the current mode */}\n            </button>\n\n            {/* List of saved lists */}\n<ul>\n    {Array.isArray(savedLists) && savedLists.length > 0 ? (\n        savedLists.map((list, index) => (\n            <li key={index}>\n                \n                <button onClick={() => handleSelectSavedList(list)}>{list.name}</button>\n\n                {/* Conditional render of edit and remove options when in edit mode */}\n                {editSavedLists && (\n                    <>\n                        {/* Save button appears when editing the name of a specific list */}\n                        {editIndex === index ? (\n                            <button \n                                className=\"saved-list-button\" \n                                onClick={() => handleUpdateSavedList(index)}\n                            >\n                                Save\n                            </button>\n                        ) : (\n                            // Button to initiate name editing for a specific list\n                            <button \n                                className=\"saved-list-button\" \n                                onClick={() => handleNameChange(index)}\n                            >\n                                <span className=\"material-symbols-outlined\">edit_square</span>\n                            </button>\n                        )}\n\n                        {/* Button to remove the selected saved list */}\n                        <button \n                            className=\"saved-list-button\" \n                            onClick={() => handleRemoveSavedList(list.id)}\n                        >\n                            <span className=\"material-symbols-outlined\">remove_selection</span>\n                        </button>\n                    </>\n                )}\n            </li>\n        ))\n    ) : (\n        <p>No saved lists available</p>\n    )}\n</ul>\n\n{/* Close button to exit the modal and return to the main view */}\n<button onClick={() => setShowSavedListsModal(false)}>Close</button>\n\n        </div>\n    </div>\n)}\n\n\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}