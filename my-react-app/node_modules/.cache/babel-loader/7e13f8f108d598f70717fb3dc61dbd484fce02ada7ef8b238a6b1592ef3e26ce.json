{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/Movie/Movies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Movie.css';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Movies = () => {\n  _s();\n  const {\n    title\n  } = useParams();\n  const [videoId, setVideoId] = useState(null);\n  const YOUTUBE_API_KEY = 'YOUR_YOUTUBE_API_KEY';\n  useEffect(() => {\n    const fetchVideo = async () => {\n      const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(title)}&key=${YOUTUBE_API_KEY}`);\n      const data = await response.json();\n      if (data.items.length > 0) {\n        setVideoId(data.items[0].id.videoId); // Get the first video\n      }\n    };\n    fetchVideo();\n  }, [title]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movie: \", title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: `https://www.youtube.com/embed/${videoId}`,\n      title: \"YouTube video player\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Movies, \"ZAHrOienQey6/IwJEMnMl/yfVrI=\", true);\n_c = Movies;\nexport default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Movies","_s","title","useParams","videoId","setVideoId","YOUTUBE_API_KEY","fetchVideo","response","fetch","encodeURIComponent","data","json","items","length","id","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/Movie/Movies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Movie.css';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\n\nconst Movies = () => {\n  const { title } = useParams();\n  const [videoId, setVideoId] = useState(null);\n  const YOUTUBE_API_KEY = 'YOUR_YOUTUBE_API_KEY';\n\n  useEffect(() => {\n    const fetchVideo = async () => {\n      const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(title)}&key=${YOUTUBE_API_KEY}`\n      );\n      const data = await response.json();\n      if (data.items.length > 0) {\n        setVideoId(data.items[0].id.videoId); // Get the first video\n      }\n    };\n    fetchVideo();\n  }, [title]);\n\n  return (\n    <div>\n      <h2>Movie: {title}</h2>\n      {videoId ? (\n        <iframe\n          width=\"560\"\n          height=\"315\"\n          src={`https://www.youtube.com/embed/${videoId}`}\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n        ></iframe>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAM,CAAC,GAAGC,SAAS,CAAC,CAAC;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMW,eAAe,GAAG,sBAAsB;EAE9CV,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0EAA0EC,kBAAkB,CAACR,KAAK,CAAC,QAAQI,eAAe,EAC5H,CAAC;MACD,MAAMK,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACzBT,UAAU,CAACM,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACE,EAAE,CAACX,OAAO,CAAC,CAAC,CAAC;MACxC;IACF,CAAC;IACDG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,oBACEH,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,GAAI,SAAO,EAACd,KAAK;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACtBhB,OAAO,gBACNL,OAAA;MACEsB,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAE,iCAAiCnB,OAAO,EAAG;MAChDF,KAAK,EAAC,sBAAsB;MAC5BsB,WAAW,EAAC,GAAG;MACfC,KAAK,EAAC,0FAA0F;MAChGC,eAAe;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,gBAEVrB,OAAA;MAAAiB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnB,EAAA,CApCID,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AAsCZ,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}