{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState([]); // Repository of saved lists\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n  // Load inputList from localStorage when the component mounts\n  useEffect(() => {\n    const storedList = localStorage.getItem('inputList');\n    if (storedList) {\n      setInputList(JSON.parse(storedList));\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n\n  // Load saved lists from local storage on component mount\n  useEffect(() => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    setSavedLists(lists);\n  }, []);\n  const handleSaveList = () => {\n    if (listName.trim() && inputList.length) {\n      const newList = {\n        id: uuidv4(),\n        name: listName,\n        items: inputList\n      };\n      const updatedLists = [...savedLists, newList];\n      setSavedLists(updatedLists);\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n      setListName('');\n      setInputList([]);\n      setShowSaveInput(false);\n      alert('List saved successfully!');\n    }\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async movieTitle => {\n    try {\n      // Fetch movie details using the title to get the movie ID\n      const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n      const movie = searchResponse.data.results[0]; // Get the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n        const reviews = reviewsResponse.data.results;\n\n        // Navigate to the Movies component and pass reviews and movie title\n        navigate(`/movie/${movieId}`, {\n          state: {\n            reviews,\n            movieTitle\n          }\n        });\n      } else {\n        console.error(\"Movie not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); //avoid page reload\n    if (input.trim()) {\n      // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000); // Remove the message after 1 second\n    }\n  };\n\n  // Removes a movie from the input list by ID\n  const handleRemove = id => {\n    setInputList(inputList.filter(item => item.id !== id)); // Filter out movie by ID\n    setMessage('Movie removed successfully!'); // Feedback message\n    setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n  };\n  const handleEdit = id => {\n    // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find(item => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);\n    setEditId(id); // Update editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = event => {\n    event.preventDefault();\n    //loops over items in inputList. For every element, the function inside the map() is called.\n    if (editText.trim() && editId) {\n      setInputList(inputList.map(item =>\n      //checks if current item's id matches, creates a copy of item object and updates with editText.\n      item.id === editId ? {\n        ...item,\n        text: editText\n      } : item //Otherwise unchanged\n      ));\n      setEditText('');\n      setEditId(null);\n      setMessage('Movie edited successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleEditCancel = () => {\n    setEditText(''); // Clear the editText state\n    setEditId(null); // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n  const handleSearchMovie = async movieTitle => {\n    // Fetch search results from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    });\n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = selectedList => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n  // Toggles the edit mode for saved lists\n  const handleEditSavedLists = () => {\n    setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n  };\n  // Removes a saved list from the repository by ID\n  const handleRemoveSavedList = id => {\n    const updatedLists = savedLists.filter(list => list.id !== id); // Filter out the list to be removed\n    setSavedLists(updatedLists); // Update the saved lists state\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists)); // Persist changes to localStorage\n  };\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stream-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), showSaveInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: e => setListName(e.target.value),\n          placeholder: \"Enter List Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSaveList,\n          children: \"Save List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleShowSaveInput,\n        children: \"Save List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleViewSavedLists,\n        children: \"View All Saved Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"input-list\",\n      children: inputList.map(item =>\n      /*#__PURE__*/\n      // iterates over each item in the inputList array.\n      // `item.id` comes from the `id` property of each object in the `inputList` state array,\n      //key prop uses it for each <li> element to optimize list rendering and updates.\n      _jsxDEV(\"li\", {\n        className: \"input-list li\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play-button\",\n            onClick: () => handleSearchMovie(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"slideshow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => handleRemove(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"remove_selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 18\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEdit(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit_square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reviews-button\",\n            onClick: () => handleMovieReviews(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"reviews\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), editId && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"edit-form\",\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText //<input> binds to editText state var React manages and update\n            ,\n            onChange: e => setEditText(e.target.value) // Updates editText state as the user types\n            ,\n            placeholder: \"Edit Movie\",\n            className: \"edit-input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"edit-submit-button\",\n            children: \"Submit Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), showSavedListsModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a Saved List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditSavedLists,\n          children: editSavedLists ? 'Done Editing' : 'Edit Lists'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: savedLists.map(list => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [list.name, editSavedLists &&\n            /*#__PURE__*/\n            // Show remove button in edit mode\n            _jsxDEV(\"button\", {\n              onClick: () => handleRemoveSavedList(list.id),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSelectSavedList(list),\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)]\n          }, list.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSavedListsModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"OhR+8Mca90mR9Xc024A/JMJN1CA=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","v4","uuidv4","axios","jsxDEV","_jsxDEV","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","listName","setListName","showSaveInput","setShowSaveInput","savedLists","setSavedLists","showSavedListsModal","setShowSavedListsModal","editSavedLists","setEditSavedLists","navigate","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","storedList","localStorage","getItem","JSON","parse","setItem","stringify","lists","handleSaveList","trim","length","newList","id","name","items","updatedLists","alert","handleInputChange","event","target","value","handleMovieReviews","movieTitle","searchResponse","get","encodeURIComponent","movie","data","results","movieId","reviewsResponse","reviews","state","console","error","handleSubmit","preventDefault","text","setTimeout","handleRemove","filter","item","handleEdit","itemToEdit","find","handleEditSubmit","map","handleEditCancel","handleSearchMovie","response","fetch","json","searchResults","handleShowSaveInput","handleViewSavedLists","handleSelectSavedList","selectedList","handleEditSavedLists","handleRemoveSavedList","list","handleGoToCart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","e","onClick","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\n\nconst StreamList = () => {\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState([]); // Repository of saved lists\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; \n\n   // Load inputList from localStorage when the component mounts\n   useEffect(() => {\n    const storedList = localStorage.getItem('inputList');\n    if (storedList) {\n      setInputList(JSON.parse(storedList));\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n\n// Load saved lists from local storage on component mount\nuseEffect(() => {\n  const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n  setSavedLists(lists);\n}, []);\n\nconst handleSaveList = () => {\n  if (listName.trim() && inputList.length) {\n    const newList = { id: uuidv4(), name: listName, items: inputList };\n    const updatedLists = [...savedLists, newList];\n    setSavedLists(updatedLists);\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n    setListName('');\n    setInputList([]);\n    setShowSaveInput(false);\n    alert('List saved successfully!');\n  }\n};\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async (movieTitle) => {\n    try {\n        // Fetch movie details using the title to get the movie ID\n        const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n        \n        const movie = searchResponse.data.results[0]; // Get the first search result\n        if (movie) {\n            const movieId = movie.id; // Extract movieId\n            const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n            const reviews = reviewsResponse.data.results;\n\n            // Navigate to the Movies component and pass reviews and movie title\n            navigate(`/movie/${movieId}`, { state: { reviews, movieTitle } });\n        } else {\n            console.error(\"Movie not found\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie reviews:\", error);\n    }\n};\n\n  const handleSubmit = (event) => {\n    event.preventDefault();//avoid page reload\n    if (input.trim()) {\n          // Update the inputList state by adding a new movie object with a unique ID and the entered text\n          setInputList([...inputList, { id: uuidv4(), text: input }]);\n          setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000);// Remove the message after 1 second\n    }\n  };\n\n   // Removes a movie from the input list by ID\n   const handleRemove = (id) => {\n    setInputList(inputList.filter((item) => item.id !== id)); // Filter out movie by ID\n    setMessage('Movie removed successfully!'); // Feedback message\n    setTimeout(() => setMessage(''), 1000); // Clear message after 1 second\n  };\n\n  const handleEdit = (id) => {\n      // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find((item) => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);  \n    setEditId(id);  // Update editId state to track which movie is currently being edited.\n  };\n\n  const handleEditSubmit = (event) => {\n    event.preventDefault();\n    //loops over items in inputList. For every element, the function inside the map() is called.\n    if (editText.trim() && editId) {\n      setInputList(inputList.map(item => \n       //checks if current item's id matches, creates a copy of item object and updates with editText.\n        item.id === editId ? { ...item, text: editText } : item//Otherwise unchanged\n      ));\n      setEditText('');\n      setEditId(null);\n      setMessage('Movie edited successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n\n  const handleEditCancel = () => {\n    setEditText('');// Clear the editText state\n    setEditId(null);  // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n\n  const handleSearchMovie = async (movieTitle) => {\n    // Fetch search results from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); \n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = (selectedList) => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n    // Toggles the edit mode for saved lists\n    const handleEditSavedLists = () => {\n      setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n    };\n     // Removes a saved list from the repository by ID\n  const handleRemoveSavedList = (id) => {\n    const updatedLists = savedLists.filter((list) => list.id !== id); // Filter out the list to be removed\n    setSavedLists(updatedLists); // Update the saved lists state\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists)); // Persist changes to localStorage\n  };\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n\n  return (\n    <div className=\"stream-list-container\">\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Feedback message */}\n\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Enter Movie\"\n          className=\"input-box\"\n        />\n        <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n        \n\n        {showSaveInput ? (\n        <div>\n          <input\n            type=\"text\"\n            value={listName}\n            onChange={(e) => setListName(e.target.value)}\n            placeholder=\"Enter List Name\"\n          />\n          <button className=\"save-button\" onClick={handleSaveList}>Save List</button>\n        </div>\n      ) : (\n        <button className=\"save-button\" onClick={handleShowSaveInput}>Save List</button>\n      )}\n      <button className=\"save-button\" onClick={handleViewSavedLists}>View All Saved Lists</button>\n      </form>\n      <ul className=\"input-list\">\n        {inputList.map((item) => (// iterates over each item in the inputList array.\n         // `item.id` comes from the `id` property of each object in the `inputList` state array,\n        //key prop uses it for each <li> element to optimize list rendering and updates.\n         <li key={item.id} className=\"input-list li\">\n      {/* Displays the text of the movie */}\n      <span>{item.text}</span>\n            <div className=\"button-container\">\n              <button className=\"play-button\" onClick={() => handleSearchMovie(item.text)}>\n              <span className=\"material-symbols-outlined\">slideshow</span> </button>\n              <button className=\"remove-button\" onClick={() => handleRemove(item.id)}> \n                 <span className=\"material-symbols-outlined\">remove_selection</span> </button>\n              <button className=\"edit-button\" onClick={() => handleEdit(item.id)}>\n              <span className=\"material-symbols-outlined\">edit_square</span> </button>\n              <button className=\"reviews-button\" onClick={() => handleMovieReviews(item.text)}>\n              <span className=\"material-symbols-outlined\">reviews</span> </button>\n            </div>\n        {/* Edit form (only visible when editing an item) */}\n        {editId && (\n        <form className=\"edit-form\" onSubmit={handleEditSubmit}>\n          <input\n            type=\"text\"\n            value={editText}//<input> binds to editText state var React manages and update\n            onChange={(e) => setEditText(e.target.value)}// Updates editText state as the user types\n            placeholder=\"Edit Movie\"\n            className=\"edit-input-box\"\n          />\n          <button type=\"submit\" className=\"edit-submit-button\">Submit Edit</button>\n          <button type=\"button\" className=\"cancel-button\" onClick={handleEditCancel}>Cancel</button>\n        </form>\n        )}\n        </li>\n        ))}\n      </ul>\n      {/* Saved Lists Modal */}\n      {showSavedListsModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <h2>Select a Saved List</h2>\n            <button onClick={handleEditSavedLists}>\n            {editSavedLists ? 'Done Editing' : 'Edit Lists'}\n          </button>\n          <ul>\n            {savedLists.map((list) => (\n              <li key={list.id}>\n                {list.name}\n                {editSavedLists && ( // Show remove button in edit mode\n                  <button onClick={() => handleRemoveSavedList(list.id)}>X</button>\n                )}\n                <button onClick={() => handleSelectSavedList(list)}>Select</button>\n              </li>\n            ))}\n          </ul>\n          <button onClick={() => setShowSavedListsModal(false)}>Close</button>\n        </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}