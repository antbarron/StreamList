{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState(() => {\n    const saved = localStorage.getItem('savedLists');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const [editIndex, setEditIndex] = useState(null); // Index of the list being edited\n  const [editedName, setEditedName] = useState(''); // Holds the edited name\n\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n  // Load inputList from localStorage when the component mounts\n  useEffect(() => {\n    const storedList = localStorage.getItem('inputList');\n    if (storedList) {\n      setInputList(JSON.parse(storedList));\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n\n  // Load saved lists from local storage on component mount\n  useEffect(() => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    setSavedLists(lists);\n  }, []);\n  useEffect(() => {\n    const savedList = JSON.parse(localStorage.getItem('savedList')) || [];\n    setInputList(savedList);\n  }, []);\n  const handleSaveList = () => {\n    if (listName.trim()) {\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      savedLists[listName] = inputList;\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n      setMessage('List saved successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleUpdateItemInList = (listId, itemId, newText) => {\n    const updatedLists = savedLists.map(list => {\n      if (list.id === listId) {\n        return {\n          ...list,\n          items: list.items.map(item => item.id === itemId ? {\n            ...item,\n            text: newText\n          } : item)\n        };\n      }\n      return list;\n    });\n    setSavedLists(updatedLists);\n  };\n  const handleAddItemToList = listId => {\n    const newItem = prompt(\"Enter new item:\"); // Get new item input\n    if (newItem) {\n      const updatedLists = savedLists.map(list => {\n        if (list.id === listId) {\n          return {\n            ...list,\n            items: [...list.items, newItem]\n          }; // Add new item\n        }\n        return list;\n      });\n      setSavedLists(updatedLists);\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists)); // Update local storage\n    }\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async movieTitle => {\n    try {\n      // Fetch movie details using the title to get the movie ID\n      const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n      const movie = searchResponse.data.results[0]; // Get the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n        const reviews = reviewsResponse.data.results;\n\n        // Navigate to the Movies component and pass reviews and movie title\n        navigate(`/movie/${movieId}`, {\n          state: {\n            reviews,\n            movieTitle\n          }\n        });\n      } else {\n        console.error(\"Movie not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); //avoid page reload\n    if (input.trim()) {\n      // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000); // Remove the message after 1 second\n    }\n  };\n  const handleRemove = id => {\n    const updatedList = inputList.filter(item => item.id !== id);\n    setInputList(updatedList);\n    const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n    savedLists[listName] = updatedList;\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n  const handleEdit = id => {\n    // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find(item => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);\n    setEditId(id); // Update editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = event => {\n    event.preventDefault();\n    if (editText.trim() && editId) {\n      const updatedList = inputList.map(item => item.id === editId ? {\n        ...item,\n        text: editText\n      } : item);\n      setInputList(updatedList);\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      savedLists[listName] = updatedList;\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n      setEditText('');\n      setEditId(null);\n      setMessage('Movie edited successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleEditCancel = () => {\n    setEditText(''); // Clear the editText state\n    setEditId(null); // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n  const handleSearchMovie = async movieTitle => {\n    // Fetch search results from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    });\n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = selectedList => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n  // Toggles the edit mode for saved lists\n  const handleEditSavedLists = () => {\n    setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n  };\n  // Removes a saved list from the repository by ID\n  const handleRemoveSavedList = id => {\n    // Filter out the list to be removed\n    const updatedLists = savedLists.filter(list => list.id !== id);\n\n    // Update state\n    setSavedLists(updatedLists);\n\n    // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n  };\n  const handleRemoveItemFromList = (listId, itemId) => {\n    const updatedLists = savedLists.map(list => {\n      if (list.id === listId) {\n        return {\n          ...list,\n          items: list.items.filter(item => item.id !== itemId)\n        };\n      }\n      return list;\n    });\n    setSavedLists(updatedLists);\n  };\n  const handleUpdateSavedList = index => {\n    const updatedLists = [...savedLists];\n    updatedLists[index].name = editedName; // Update the name\n    setSavedLists(updatedLists); // Update state\n\n    // Update local storage\n    localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n\n    // Reset the edit state\n    setEditedName('');\n    setEditIndex(null);\n    setEditSavedLists(false); // Optionally close edit mode\n  };\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stream-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), showSaveInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: e => setListName(e.target.value),\n          placeholder: \"Enter List Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSaveList,\n          children: \"Save List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleShowSaveInput,\n        children: \"Save List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleViewSavedLists,\n        children: \"View All Saved Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"input-list\",\n      children: inputList.map(item =>\n      /*#__PURE__*/\n      // iterates over each item in the inputList array.\n      // `item.id` comes from the `id` property of each object in the `inputList` state array,\n      //key prop uses it for each <li> element to optimize list rendering and updates.\n      _jsxDEV(\"li\", {\n        className: \"input-list li\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play-button\",\n            onClick: () => handleSearchMovie(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"slideshow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => handleRemove(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"remove_selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 18\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEdit(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit_square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reviews-button\",\n            onClick: () => handleMovieReviews(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"reviews\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), editId && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"edit-form\",\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText //<input> binds to editText state var React manages and update\n            ,\n            onChange: e => setEditText(e.target.value) // Updates editText state as the user types\n            ,\n            placeholder: \"Edit Movie\",\n            className: \"edit-input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"edit-submit-button\",\n            children: \"Submit Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), showSavedListsModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a Saved List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditSavedLists,\n          children: [editSavedLists ? 'Done Editing' : 'Edit Lists', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: savedLists.map((list, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [editSavedLists && editIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: editedName,\n              onChange: e => setEditedName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSelectSavedList(list),\n              className: \"saved-list-button\",\n              children: list.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 29\n            }, this), editSavedLists && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setEditIndex(index);\n                  setEditedName(list.name);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"edit_square\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRemoveSavedList(list.id),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"remove_selection\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: list.items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: editSavedLists ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: item.text,\n                    onChange: e => handleUpdateItemInList(list.id, item.id, e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleRemoveItemFromList(list.id, item.id),\n                    children: \"Remove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 41\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 41\n                }, this)\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 25\n            }, this)]\n          }, list.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSavedListsModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"c9xTzPJ0UcPwWtiBru+kdfoWolE=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","v4","uuidv4","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","listName","setListName","showSaveInput","setShowSaveInput","savedLists","setSavedLists","saved","localStorage","getItem","JSON","parse","showSavedListsModal","setShowSavedListsModal","editSavedLists","setEditSavedLists","editIndex","setEditIndex","editedName","setEditedName","navigate","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","storedList","setItem","stringify","lists","savedList","handleSaveList","trim","setTimeout","handleUpdateItemInList","listId","itemId","newText","updatedLists","map","list","id","items","item","text","handleAddItemToList","newItem","prompt","handleInputChange","event","target","value","handleMovieReviews","movieTitle","searchResponse","get","encodeURIComponent","movie","data","results","movieId","reviewsResponse","reviews","state","console","error","handleSubmit","preventDefault","handleRemove","updatedList","filter","handleEdit","itemToEdit","find","handleEditSubmit","handleEditCancel","handleSearchMovie","response","fetch","json","searchResults","handleShowSaveInput","handleViewSavedLists","handleSelectSavedList","selectedList","handleEditSavedLists","handleRemoveSavedList","handleRemoveItemFromList","handleUpdateSavedList","index","name","handleGoToCart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","e","onClick","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\n\nconst StreamList = () => {\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState(() => {\n    const saved = localStorage.getItem('savedLists');\n    return saved ? JSON.parse(saved) : [];\n});\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const [editIndex, setEditIndex] = useState(null); // Index of the list being edited\nconst [editedName, setEditedName] = useState(''); // Holds the edited name\n\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; \n\n   // Load inputList from localStorage when the component mounts\n   useEffect(() => {\n    const storedList = localStorage.getItem('inputList');\n    if (storedList) {\n      setInputList(JSON.parse(storedList));\n    }\n  }, []);\n\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n\n// Load saved lists from local storage on component mount\nuseEffect(() => {\n  const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n  setSavedLists(lists);\n}, []);\n\nuseEffect(() => {\n  const savedList = JSON.parse(localStorage.getItem('savedList')) || [];\n  setInputList(savedList);\n}, []);\n\nconst handleSaveList = () => {\n  if (listName.trim()) {\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      savedLists[listName] = inputList;\n      localStorage.setItem('savedLists', JSON.stringify(savedLists));\n      setMessage('List saved successfully!');\n      setTimeout(() => setMessage(''), 1000);\n  }\n};\nconst handleUpdateItemInList = (listId, itemId, newText) => {\n  const updatedLists = savedLists.map(list => {\n      if (list.id === listId) {\n          return {\n              ...list,\n              items: list.items.map(item => \n                  item.id === itemId ? { ...item, text: newText } : item\n              ),\n          };\n      }\n      return list;\n  });\n  setSavedLists(updatedLists);\n};\n\n\nconst handleAddItemToList = (listId) => {\n  const newItem = prompt(\"Enter new item:\"); // Get new item input\n  if (newItem) {\n      const updatedLists = savedLists.map((list) => {\n          if (list.id === listId) {\n              return { ...list, items: [...list.items, newItem] }; // Add new item\n          }\n          return list;\n      });\n\n      setSavedLists(updatedLists);\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists)); // Update local storage\n  }\n};\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n  const handleMovieReviews = async (movieTitle) => {\n    try {\n        // Fetch movie details using the title to get the movie ID\n        const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=55c3657d92dd22cabb8b1efba6e60e6a&query=${encodeURIComponent(movieTitle)}`);\n        \n        const movie = searchResponse.data.results[0]; // Get the first search result\n        if (movie) {\n            const movieId = movie.id; // Extract movieId\n            const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=55c3657d92dd22cabb8b1efba6e60e6a`);\n            const reviews = reviewsResponse.data.results;\n\n            // Navigate to the Movies component and pass reviews and movie title\n            navigate(`/movie/${movieId}`, { state: { reviews, movieTitle } });\n        } else {\n            console.error(\"Movie not found\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie reviews:\", error);\n    }\n};\n\n  const handleSubmit = (event) => {\n    event.preventDefault();//avoid page reload\n    if (input.trim()) {\n          // Update the inputList state by adding a new movie object with a unique ID and the entered text\n          setInputList([...inputList, { id: uuidv4(), text: input }]);\n          setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000);// Remove the message after 1 second\n    }\n  };\n\n  const handleRemove = (id) => {\n    const updatedList = inputList.filter(item => item.id !== id);\n    setInputList(updatedList);\n    const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n    savedLists[listName] = updatedList;\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n};\n\n\n  const handleEdit = (id) => {\n      // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find((item) => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);  \n    setEditId(id);  // Update editId state to track which movie is currently being edited.\n  };\n\n  const handleEditSubmit = (event) => {\n    event.preventDefault();\n    if (editText.trim() && editId) {\n        const updatedList = inputList.map(item => \n            item.id === editId ? { ...item, text: editText } : item\n        );\n\n        setInputList(updatedList);\n        const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n        savedLists[listName] = updatedList;\n        localStorage.setItem('savedLists', JSON.stringify(savedLists));\n\n        setEditText('');\n        setEditId(null);\n        setMessage('Movie edited successfully!');\n        setTimeout(() => setMessage(''), 1000);\n    }\n};\n\n\n  const handleEditCancel = () => {\n    setEditText('');// Clear the editText state\n    setEditId(null);  // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n\n  const handleSearchMovie = async (movieTitle) => {\n    // Fetch search results from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); \n  };\n  // Toggles display for list name input\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true); // Show input for saving list name\n  };\n\n  // Opens the modal to view all saved lists\n  const handleViewSavedLists = () => {\n    setShowSavedListsModal(true); // Set modal visibility to true\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = (selectedList) => {\n    setInputList(selectedList.items); // Load selected list items\n    setShowSavedListsModal(false); // Close modal\n  };\n    // Toggles the edit mode for saved lists\n    const handleEditSavedLists = () => {\n      setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n    };\n     // Removes a saved list from the repository by ID\n     const handleRemoveSavedList = (id) => {\n      // Filter out the list to be removed\n      const updatedLists = savedLists.filter(list => list.id !== id);\n      \n      // Update state\n      setSavedLists(updatedLists);\n      \n      // Update local storage\n      localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n  };\n  \n  \n  const handleRemoveItemFromList = (listId, itemId) => {\n    const updatedLists = savedLists.map(list => {\n        if (list.id === listId) {\n            return {\n                ...list,\n                items: list.items.filter(item => item.id !== itemId),\n            };\n        }\n        return list;\n    });\n    setSavedLists(updatedLists);\n};\n\n\n\n\n  \n  const handleUpdateSavedList = (index) => {\n    const updatedLists = [...savedLists];\n    updatedLists[index].name = editedName; // Update the name\n    setSavedLists(updatedLists); // Update state\n\n // Update local storage\n localStorage.setItem('savedLists', JSON.stringify(updatedLists));\n    \n // Reset the edit state\n setEditedName(''); \n setEditIndex(null); \n setEditSavedLists(false); // Optionally close edit mode\n};\n\n\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n\n  return (\n    <div className=\"stream-list-container\">\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Feedback message */}\n\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Enter Movie\"\n          className=\"input-box\"\n        />\n        <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n        \n\n        {showSaveInput ? (\n        <div>\n          <input\n            type=\"text\"\n            value={listName}\n            onChange={(e) => setListName(e.target.value)}\n            placeholder=\"Enter List Name\"\n          />\n          <button className=\"save-button\" onClick={handleSaveList}>Save List</button>\n        </div>\n      ) : (\n        <button className=\"save-button\" onClick={handleShowSaveInput}>Save List</button>\n      )}\n      <button className=\"save-button\" onClick={handleViewSavedLists}>View All Saved Lists</button>\n      </form>\n      <ul className=\"input-list\">\n        {inputList.map((item) => (// iterates over each item in the inputList array.\n         // `item.id` comes from the `id` property of each object in the `inputList` state array,\n        //key prop uses it for each <li> element to optimize list rendering and updates.\n         <li key={item.id} className=\"input-list li\">\n      {/* Displays the text of the movie */}\n      <span>{item.text}</span>\n            <div className=\"button-container\">\n              <button className=\"play-button\" onClick={() => handleSearchMovie(item.text)}>\n              <span className=\"material-symbols-outlined\">slideshow</span> </button>\n              <button className=\"remove-button\" onClick={() => handleRemove(item.id)}> \n                 <span className=\"material-symbols-outlined\">remove_selection</span> </button>\n              <button className=\"edit-button\" onClick={() => handleEdit(item.id)}>\n              <span className=\"material-symbols-outlined\">edit_square</span> </button>\n              <button className=\"reviews-button\" onClick={() => handleMovieReviews(item.text)}>\n              <span className=\"material-symbols-outlined\">reviews</span> </button>\n            </div>\n        {/* Edit form (only visible when editing an item) */}\n        {editId && (\n        <form className=\"edit-form\" onSubmit={handleEditSubmit}>\n          <input\n            type=\"text\"\n            value={editText}//<input> binds to editText state var React manages and update\n            onChange={(e) => setEditText(e.target.value)}// Updates editText state as the user types\n            placeholder=\"Edit Movie\"\n            className=\"edit-input-box\"\n          />\n          <button type=\"submit\" className=\"edit-submit-button\">Submit Edit</button>\n          <button type=\"button\" className=\"cancel-button\" onClick={handleEditCancel}>Cancel</button>\n        </form>\n        )}\n        </li>\n        ))}\n      </ul>\n      {/* Saved Lists Modal */}\n{showSavedListsModal && (\n    <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n            <h2>Select a Saved List</h2>\n            {/* Button to toggle between edit and view modes for saved lists */}\n            <button onClick={handleEditSavedLists}>\n                {editSavedLists ? 'Done Editing' : 'Edit Lists'} {/* Changes button text based on current mode */}\n            </button>\n            <ul>\n                {savedLists.map((list, index) => (\n                    <li key={list.id}>\n                        {editSavedLists && editIndex === index ? (\n                            <input \n                                type=\"text\" \n                                value={editedName} \n                                onChange={(e) => setEditedName(e.target.value)} \n                            />\n                        ) : (\n                            <button \n                                onClick={() => handleSelectSavedList(list)} \n                                className=\"saved-list-button\"\n                            >\n                                {list.name}\n                            </button>\n                        )}\n                        {editSavedLists && (\n                            <>\n                                <button \n                                    onClick={() => {\n                                        setEditIndex(index); \n                                        setEditedName(list.name); \n                                    }}>\n                                    <span className=\"material-symbols-outlined\">edit_square</span>\n                                </button>\n                                <button onClick={() => handleRemoveSavedList(list.id)}>\n                                    <span className=\"material-symbols-outlined\">remove_selection</span>\n                                </button>\n                            </>\n                        )}\n\n                        {/* Render the items in the saved list */}\n                        <ul>\n                            {list.items.map((item) => (\n                                <li key={item.id}>\n                                    {editSavedLists ? (\n                                        <div>\n                                            <input \n                                                type=\"text\" \n                                                value={item.text}\n                                                onChange={(e) => handleUpdateItemInList(list.id, item.id, e.target.value)}\n                                            />\n                                            <button onClick={() => handleRemoveItemFromList(list.id, item.id)}>\n                                                Remove\n                                            </button>\n                                        </div>\n                                    ) : (\n                                        <span>{item.text}</span>\n                                    )}\n                                </li>\n                            ))}\n                        </ul>\n                        </li>\n                ))}\n            </ul>\n            {/* Button to close the modal and return to the main view */}\n            <button onClick={() => setShowSavedListsModal(false)}>Close</button>\n        </div>\n    </div>\n)}\n\n\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}