{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = 'AIzaSyDvS2KFydtyihEeFahH7yti5cDekE8cH4g';\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); //avoid page reload\n    if (input.trim()) {\n      // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000); // Remove the message after 1 second\n    }\n  };\n  const handleRemove = id => {\n    setInputList(inputList.filter(item => item.id !== id));\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n  const handleEdit = id => {\n    // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find(item => item.id === id);\n    setEditText(itemToEdit.text); // Set the editText state to the movie's current title, so it appears in the input field.\n    setEditId(id); // Update the editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = event => {\n    event.preventDefault();\n    if (editText.trim() && editId) {\n      setInputList(inputList.map(item =>\n      //loops over items in inputList. For every element, the function inside the map() is called.\n      //checks if the current item's id matches, creates a copy of the item object and update its text with editText. therwise unchanged\n      item.id === editId ? {\n        ...item,\n        text: editText\n      } : item));\n      setEditText('');\n      setEditId(null);\n      setMessage('Movie edited successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleEditCancel = () => {\n    setEditText(''); // Clear the editText state\n    setEditId(null); // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n  const handleSearchMovie = async movieTitle => {\n    // Fetch search results from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    });\n  };\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"save-button\",\n        onClick: handleGoToCart,\n        children: \"Save List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"input-list\",\n      children: inputList.map(item =>\n      /*#__PURE__*/\n      // iterates over each item in the inputList array.\n      // `item.id` comes from the `id` property of each object in the `inputList` state array,\n      //key prop uses it for each <li> element to optimize list rendering and updates.\n      _jsxDEV(\"li\", {\n        className: \"list-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play-button\",\n            onClick: () => handleSearchMovie(item.text),\n            children: \"Start Watching!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => handleRemove(item.id),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEdit(item.id),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), editId && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"edit-form\",\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText //  <input>  binds to editText state variable, React manages through two-way binding, updates \n            ,\n            onChange: e => setEditText(e.target.value) // Updates editText state as the user types\n            ,\n            placeholder: \"Edit Movie\",\n            className: \"edit-input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"edit-submit-button\",\n            children: \"Submit Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 3\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"wcTFyedhdPWp7LkWNQ7zQs+cfZQ=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useState","useNavigate","v4","uuidv4","jsxDEV","_jsxDEV","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","navigate","YOUTUBE_API_KEY","handleInputChange","event","target","value","handleSubmit","preventDefault","trim","id","text","setTimeout","handleRemove","filter","item","handleEdit","itemToEdit","find","handleEditSubmit","map","handleEditCancel","handleSearchMovie","movieTitle","response","fetch","encodeURIComponent","data","json","state","searchResults","items","handleGoToCart","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","onClick","e","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport './StreamList.css';\n\nconst StreamList = () => {\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = 'AIzaSyDvS2KFydtyihEeFahH7yti5cDekE8cH4g'; \n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();//avoid page reload\n    if (input.trim()) {\n          // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, { id: uuidv4(), text: input }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000);// Remove the message after 1 second\n    }\n  };\n\n  const handleRemove = (id) => {\n    setInputList(inputList.filter((item) => item.id !== id));\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n\n  const handleEdit = (id) => {\n      // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find((item) => item.id === id);\n    setEditText(itemToEdit.text);  // Set the editText state to the movie's current title, so it appears in the input field.\n    setEditId(id);  // Update the editId state to track which movie is currently being edited.\n  };\n\n  const handleEditSubmit = (event) => {\n    event.preventDefault();\n    if (editText.trim() && editId) {\n      setInputList(inputList.map(item => //loops over items in inputList. For every element, the function inside the map() is called.\n       //checks if the current item's id matches, creates a copy of the item object and update its text with editText. therwise unchanged\n        item.id === editId ? { ...item, text: editText } : item\n      ));\n      setEditText('');\n      setEditId(null);\n      setMessage('Movie edited successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n\n  const handleEditCancel = () => {\n    setEditText('');// Clear the editText state\n    setEditId(null);  // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n\n  const handleSearchMovie = async (movieTitle) => {\n    // Fetch search results from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); \n  };\n  \n\n  const handleGoToCart = () => {\n    navigate('/cart');\n  };\n\n  return (\n    <div>\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Feedback message */}\n\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Enter Movie\"\n          className=\"input-box\"\n        />\n        <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n        <button type=\"button\" className=\"save-button\" onClick={handleGoToCart}>Save List</button>\n      </form>\n      <ul className=\"input-list\">\n        {inputList.map((item) => (// iterates over each item in the inputList array.\n         // `item.id` comes from the `id` property of each object in the `inputList` state array,\n        //key prop uses it for each <li> element to optimize list rendering and updates.\n         <li key={item.id} className=\"list-item\">\n      {/* Displays the text of the movie */}\n      <span>{item.text}</span>\n            <div className=\"button-container\">\n              <button className=\"play-button\" onClick={() => handleSearchMovie(item.text)}>Start Watching!</button>\n              <button className=\"remove-button\" onClick={() => handleRemove(item.id)}>Remove</button>\n              <button className=\"edit-button\" onClick={() => handleEdit(item.id)}>Edit</button>\n            </div>\n             {/* Edit form (only visible when editing an item) */}\n             {editId && (\n  <form className=\"edit-form\" onSubmit={handleEditSubmit}>\n    <input\n      type=\"text\"\n      value={editText}//  <input>  binds to editText state variable, React manages through two-way binding, updates \n      onChange={(e) => setEditText(e.target.value)}// Updates editText state as the user types\n      placeholder=\"Edit Movie\"\n      className=\"edit-input-box\"\n    />\n    <button type=\"submit\" className=\"edit-submit-button\">Submit Edit</button>\n    <button type=\"button\" className=\"cancel-button\" onClick={handleEditCancel}>Cancel</button>\n  </form>\n)}\n\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}