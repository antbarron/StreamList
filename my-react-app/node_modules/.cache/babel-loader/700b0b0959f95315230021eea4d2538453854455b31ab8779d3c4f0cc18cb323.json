{"ast":null,"code":"var _jsxFileName = \"/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreamList = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState([]);\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n  const TMDB_API = '55c3657d92dd22cabb8b1efba6e60e6a';\n\n  // Load inputList and savedLists from localStorage on component mount\n  useEffect(() => {\n    const storedInputList = JSON.parse(localStorage.getItem('inputList')) || [];\n    const storedSavedLists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    setInputList(storedInputList);\n    setSavedLists(storedSavedLists);\n  }, []);\n  // Save inputList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('inputList', JSON.stringify(inputList));\n  }, [inputList]);\n  // Save savedLists to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('savedLists', JSON.stringify(savedLists));\n  }, [savedLists]);\n  useEffect(() => {\n    // Find the index of the list in savedLists that matches the current listName\n    const currentListIndex = savedLists.findIndex(list => list.id === listName);\n    // Check if the list was found and if its items are different from inputList\n    if (currentListIndex !== -1 && savedLists[currentListIndex].items !== inputList) {\n      // Create a copy of savedLists to avoid mutating the original state\n      const updatedLists = [...savedLists];\n      // Update the specific list in the copied array by creating a new object\n      updatedLists[currentListIndex] = {\n        ...updatedLists[currentListIndex],\n        items: inputList\n      };\n      // Update the savedLists state with the modified array, which triggers a re-render\n      setSavedLists(updatedLists);\n    }\n    // The useEffect will re-run when any dependency changes\n  }, [inputList, listName, savedLists]);\n\n  // Function to save a list\n  const handleSaveList = () => {\n    if (listName.trim()) {\n      const newList = {\n        id: uuidv4(),\n        name: listName,\n        items: inputList\n      };\n      setSavedLists(prevLists => {\n        const updatedLists = [...prevLists, newList];\n        setMessage('List saved successfully!');\n        setTimeout(() => setMessage(''), 2000);\n        return updatedLists;\n      });\n      setListName('');\n      setInputList([]);\n      setShowSaveInput(false);\n    } else {\n      console.error(\"List name is empty or invalid.\");\n    }\n  };\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true);\n    setListName('');\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); //avoid page reload\n    if (input.trim()) {\n      // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, {\n        id: uuidv4(),\n        text: input\n      }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000); // Remove the message after 1 second\n    }\n  };\n  const handleRemove = id => {\n    // Create a new list by filtering out the item with the specified id\n    const updatedList = inputList.filter(item => item.id !== id);\n    // Update the input list state to reflect the new list after removing the item\n    setInputList(updatedList);\n    // Display a success message indicating that the movie was removed\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n  const handleEdit = id => {\n    // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find(item => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);\n    setEditId(id); // Update editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = event => {\n    event.preventDefault();\n    // Check if the edit text is not empty and if there is a valid edit ID\n    if (editText.trim() && editId) {\n      // Create a new list by mapping over the current input list\n      // Update the text of the item that matches the editId\n      const updatedList = inputList.map(item => item.id === editId ? {\n        ...item,\n        text: editText\n      } : item);\n      // Update the input list state to the newly updated list\n      setInputList(updatedList);\n      // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n      const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n      // Update the saved lists in local storage with the new input list for the current list name\n      savedLists[listName] = updatedList;\n      localStorage.setItem('savedLists', JSON.stringify(savedLists)); // Save the updated lists back to local storage\n      setEditText('');\n      setEditId(null);\n      setMessage('Movie edited successfully!');\n      setTimeout(() => setMessage(''), 1000);\n    }\n  };\n  const handleEditCancel = () => {\n    setEditText(''); // Clear the editText state\n    setEditId(null); // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n  const handleSearchMovie = async movieTitle => {\n    // Fetch search results from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`);\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, {\n      state: {\n        searchResults: data.items\n      }\n    });\n  };\n  const handleMovieReviews = async movieTitle => {\n    try {\n      // Fetch movie details using the title to get the movie ID\n      const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API}&query=${encodeURIComponent(movieTitle)}`);\n      const movie = searchResponse.data.results[0]; // Get the first search result\n      if (movie) {\n        const movieId = movie.id; // Extract movieId\n        const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${TMDB_API}`);\n        const reviews = reviewsResponse.data.results;\n\n        // Navigate to the Movies component and pass reviews and movie title\n        navigate(`/movie/${movieId}`, {\n          state: {\n            reviews,\n            movieTitle\n          }\n        });\n      } else {\n        console.error(\"Movie not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = selectedList => {\n    setInputList(selectedList.items); // Load selected list items\n    setListName(selectedList.id); // Set the current list name to allow updates\n    setShowSavedListsModal(false); // Close modal\n  };\n  // Toggles the edit mode for saved lists\n  const handleEditSavedLists = () => {\n    setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n  };\n  // Removes a saved list from the repository by ID\n  const handleRemoveSavedList = id => {\n    const updatedLists = savedLists.filter(list => list.id !== id); // Remove the list by id\n    setSavedLists(updatedLists); // Update state  \n    // Update local storage\n    const storedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n    delete storedLists[id]; // Remove from local storage\n    localStorage.setItem('savedLists', JSON.stringify(storedLists));\n  };\n  const handleSaveAndClear = () => {\n    handleSaveList(); // Call the save list function\n    setInputList([]);\n  };\n  const handleViewSavedLists = () => {\n    const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n    setSavedLists(lists);\n    console.log('Loaded savedLists:', lists);\n    setShowSavedListsModal(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stream-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"inline-heading\",\n        children: \"Stream List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"theaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feedback-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter Movie\",\n        className: \"input-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }, this), showSaveInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: e => setListName(e.target.value),\n          placeholder: \"Enter List Name\",\n          className: \"input-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleSaveList,\n          className: \"submit-button\",\n          children: \"Save List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleShowSaveInput,\n        children: \"Save StreamList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleViewSavedLists,\n          children: \"View My StreamLists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSaveAndClear,\n          children: \"Create New StreamList\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"input-list\",\n      children: inputList.map(item =>\n      /*#__PURE__*/\n      // iterates over each item in the inputList array.\n      // `item.id` comes from the `id` property of each object in the `inputList` state array,\n      //key prop uses it for each <li> element to optimize list rendering and updates.\n      _jsxDEV(\"li\", {\n        className: \"input-list li\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play-button\",\n            onClick: () => handleSearchMovie(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"slideshow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => handleRemove(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"remove_selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 18\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEdit(item.id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit_square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reviews-button\",\n            onClick: () => handleMovieReviews(item.text),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"reviews\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), editId && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"edit-form\",\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText //<input> binds to editText state var React manages and update\n            ,\n            onChange: e => setEditText(e.target.value) // Updates editText state as the user types\n            ,\n            placeholder: \"Edit Movie\",\n            className: \"edit-input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"edit-submit-button\",\n            children: \"Submit Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: handleEditCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), showSavedListsModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"My StreamLists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditSavedLists,\n          children: editSavedLists ? 'Done Editing' : 'Edit Lists'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Array.isArray(savedLists) && savedLists.length > 0 ? savedLists.map((list, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"saved-list-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"saved-list-name\",\n              onClick: () => handleSelectSavedList(list),\n              children: list.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 29\n            }, this), editSavedLists && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"saved-list-button\",\n                onClick: () => handleRemoveSavedList(list.id),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-symbols-outlined\",\n                  children: \"remove_selection\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No saved lists available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSavedListsModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamList, \"vdMnpJXiUuYBAmtBmnqidnFF94Q=\", false, function () {\n  return [useNavigate];\n});\n_c = StreamList;\nexport default StreamList;\nvar _c;\n$RefreshReg$(_c, \"StreamList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","v4","uuidv4","axios","jsxDEV","_jsxDEV","StreamList","_s","input","setInput","inputList","setInputList","editText","setEditText","editId","setEditId","message","setMessage","listName","setListName","showSaveInput","setShowSaveInput","savedLists","setSavedLists","showSavedListsModal","setShowSavedListsModal","editSavedLists","setEditSavedLists","navigate","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","TMDB_API","storedInputList","JSON","parse","localStorage","getItem","storedSavedLists","setItem","stringify","currentListIndex","findIndex","list","id","items","updatedLists","handleSaveList","trim","newList","name","prevLists","setTimeout","console","error","handleShowSaveInput","handleInputChange","event","target","value","handleSubmit","preventDefault","text","handleRemove","updatedList","filter","item","handleEdit","itemToEdit","find","handleEditSubmit","map","handleEditCancel","handleSearchMovie","movieTitle","response","fetch","encodeURIComponent","data","json","state","searchResults","handleMovieReviews","searchResponse","get","movie","results","movieId","reviewsResponse","reviews","handleSelectSavedList","selectedList","handleEditSavedLists","handleRemoveSavedList","storedLists","handleSaveAndClear","handleViewSavedLists","lists","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","e","onClick","Array","isArray","length","index","_c","$RefreshReg$"],"sources":["/workspaces/StreamList/my-react-app/src/components/StreamList/StreamList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique IDs\nimport axios from 'axios';\nimport './StreamList.css';\n\nconst StreamList = () => {\n  const [input, setInput] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [editText, setEditText] = useState(''); // To store the current text when editing\n  const [editId, setEditId] = useState(null); // To track which item is being edited\n  const [message, setMessage] = useState(''); // To store feedback messages\n  const [listName, setListName] = useState(''); // New state for list name\n  const [showSaveInput, setShowSaveInput] = useState(false); // Toggle for list name input\n  const [savedLists, setSavedLists] = useState([]);\n  const [showSavedListsModal, setShowSavedListsModal] = useState(false); // Toggle modal visibility\n  const [editSavedLists, setEditSavedLists] = useState(false); // Tracks edit mode for saved lists\n  const navigate = useNavigate();\n  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY; \n  const TMDB_API = '55c3657d92dd22cabb8b1efba6e60e6a';\n  \n // Load inputList and savedLists from localStorage on component mount\nuseEffect(() => {\n  const storedInputList = JSON.parse(localStorage.getItem('inputList')) || [];\n  const storedSavedLists = JSON.parse(localStorage.getItem('savedLists')) || [];\n  setInputList(storedInputList);\n  setSavedLists(storedSavedLists);\n}, []);\n// Save inputList to localStorage whenever it changes\nuseEffect(() => {\n  localStorage.setItem('inputList', JSON.stringify(inputList));\n}, [inputList]);\n// Save savedLists to localStorage whenever it changes\nuseEffect(() => {\n  localStorage.setItem('savedLists', JSON.stringify(savedLists));\n}, [savedLists]);\nuseEffect(() => {\n  // Find the index of the list in savedLists that matches the current listName\n  const currentListIndex = savedLists.findIndex(list => list.id === listName);\n  // Check if the list was found and if its items are different from inputList\n  if (currentListIndex !== -1 && savedLists[currentListIndex].items !== inputList) {\n    // Create a copy of savedLists to avoid mutating the original state\n    const updatedLists = [...savedLists];\n    // Update the specific list in the copied array by creating a new object\n    updatedLists[currentListIndex] = {\n      ...updatedLists[currentListIndex],\n      items: inputList\n    };\n    // Update the savedLists state with the modified array, which triggers a re-render\n    setSavedLists(updatedLists); \n  }\n  // The useEffect will re-run when any dependency changes\n}, [inputList, listName, savedLists]);\n\n  // Function to save a list\n  const handleSaveList = () => {\n    if (listName.trim()) {\n      const newList = {\n        id: uuidv4(),\n        name: listName,\n        items: inputList,\n      };\n      setSavedLists(prevLists => {\n        const updatedLists = [...prevLists, newList];\n        setMessage('List saved successfully!');\n        setTimeout(() => setMessage(''), 2000);\n        return updatedLists;\n      });\n      setListName('');\n      setInputList([]);\n      setShowSaveInput(false);\n    } else {\n      console.error(\"List name is empty or invalid.\");\n    }\n  };\n  const handleShowSaveInput = () => {\n    setShowSaveInput(true);\n    setListName('');\n  };\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();//avoid page reload\n    if (input.trim()) {\n          // Update the inputList state by adding a new movie object with a unique ID and the entered text\n      setInputList([...inputList, { id: uuidv4(), text: input }]);\n      setInput('');\n      setMessage('Movie added successfully!');\n      setTimeout(() => setMessage(''), 1000);// Remove the message after 1 second\n    }\n  };\n  const handleRemove = (id) => {\n    // Create a new list by filtering out the item with the specified id\n    const updatedList = inputList.filter(item => item.id !== id);\n    // Update the input list state to reflect the new list after removing the item\n    setInputList(updatedList);  \n    // Display a success message indicating that the movie was removed\n    setMessage('Movie removed successfully!');\n    setTimeout(() => setMessage(''), 1000);\n  };\n  const handleEdit = (id) => {\n      // Locate the item in the inputList that matches the provided ID.\n    const itemToEdit = inputList.find((item) => item.id === id);\n    // Set editText state with curent name in the input field and allows changes\n    setEditText(itemToEdit.text);  \n    setEditId(id);  // Update editId state to track which movie is currently being edited.\n  };\n  const handleEditSubmit = (event) => {\n    event.preventDefault();\n    // Check if the edit text is not empty and if there is a valid edit ID\n    if (editText.trim() && editId) {\n        // Create a new list by mapping over the current input list\n        // Update the text of the item that matches the editId\n        const updatedList = inputList.map(item => \n            item.id === editId ? { ...item, text: editText } : item\n        );\n        // Update the input list state to the newly updated list\n        setInputList(updatedList); \n        // Retrieve the saved lists from local storage, or initialize an empty object if none exist\n        const savedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n        // Update the saved lists in local storage with the new input list for the current list name\n        savedLists[listName] = updatedList;  \n        localStorage.setItem('savedLists', JSON.stringify(savedLists));// Save the updated lists back to local storage\n        setEditText('');\n        setEditId(null);\n        setMessage('Movie edited successfully!');\n        setTimeout(() => setMessage(''), 1000);\n    }};\n\n  const handleEditCancel = () => {\n    setEditText('');// Clear the editText state\n    setEditId(null);  // Set editId to null to indicate that no movie is currently in the editing state.\n  };\n\n  const handleSearchMovie = async (movieTitle) => {\n    // Fetch search results from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&q=${encodeURIComponent(movieTitle)}&key=${YOUTUBE_API_KEY}`\n    );\n    // Parse the JSON data from the response\n    const data = await response.json();\n    // Navigate to the movie detail page, passing the search results as state\n    navigate(`/movie/${movieTitle}`, { state: { searchResults: data.items } }); \n  };\n  \n  const handleMovieReviews = async (movieTitle) => {\n    try {\n        // Fetch movie details using the title to get the movie ID\n        const searchResponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API}&query=${encodeURIComponent(movieTitle)}`);\n        \n        const movie = searchResponse.data.results[0]; // Get the first search result\n        if (movie) {\n            const movieId = movie.id; // Extract movieId\n            const reviewsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${TMDB_API}`);\n            const reviews = reviewsResponse.data.results;\n\n            // Navigate to the Movies component and pass reviews and movie title\n            navigate(`/movie/${movieId}`, { state: { reviews, movieTitle } });\n        } else {\n            console.error(\"Movie not found\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching movie reviews:\", error);\n    }\n};\n\n\n  // Loads selected saved list items into the main list\n  const handleSelectSavedList = (selectedList) => {\n    setInputList(selectedList.items); // Load selected list items\n    setListName(selectedList.id); // Set the current list name to allow updates\n    setShowSavedListsModal(false); // Close modal\n  };\n  // Toggles the edit mode for saved lists\n  const handleEditSavedLists = () => {\n    setEditSavedLists(!editSavedLists); // Toggle the edit mode state\n  };\n  // Removes a saved list from the repository by ID\n   const handleRemoveSavedList = (id) => {\n   const updatedLists = savedLists.filter(list => list.id !== id); // Remove the list by id\n   setSavedLists(updatedLists); // Update state  \n  // Update local storage\n   const storedLists = JSON.parse(localStorage.getItem('savedLists')) || {};\n   delete storedLists[id]; // Remove from local storage\n   localStorage.setItem('savedLists', JSON.stringify(storedLists));\n  };\n  const handleSaveAndClear = () => {\n  handleSaveList(); // Call the save list function\n  setInputList([]);\n  };\n  const handleViewSavedLists = () => {\n  const lists = JSON.parse(localStorage.getItem('savedLists')) || [];\n  setSavedLists(lists);\n  console.log('Loaded savedLists:', lists);\n  setShowSavedListsModal(true);\n  };\n\n  return (\n    <div className=\"stream-list-container\">\n      <div className=\"header-container\">\n        <span className=\"material-symbols-outlined\">theaters</span>\n        <h1 className=\"inline-heading\">Stream List</h1>\n        <span className=\"material-symbols-outlined\">theaters</span>\n      </div>\n\n      {message && <p className=\"feedback-message\">{message}</p>} {/* Feedback message */}\n\n      <form className=\"input-form\" onSubmit={handleSubmit}>\n    <input\n        type=\"text\"\n        value={input}\n        onChange={handleInputChange}\n        placeholder=\"Enter Movie\"\n        className=\"input-box\"\n    />\n    <button type=\"submit\" className=\"submit-button\">Add Movie</button>\n    \n    {showSaveInput ? (\n        <div>\n            <input\n                type=\"text\"\n                value={listName}\n                onChange={(e) => setListName(e.target.value)}\n                placeholder=\"Enter List Name\"\n                className=\"input-box\"\n            />\n            <button type=\"button\" onClick={handleSaveList} className=\"submit-button\">Save List</button>\n        </div>\n    ) : (\n        <button className=\"save-button\" onClick={handleShowSaveInput}>Save StreamList</button>\n    )}\n\n    {/* Wrap all buttons in a container for horizontal alignment */}\n    <div className=\"button-container\">\n        <button className=\"save-button\" onClick={handleViewSavedLists}>View My StreamLists</button>\n        <button className=\"save-button\" onClick={handleSaveAndClear}>Create New StreamList</button>\n    </div>\n</form>\n\n\n      <ul className=\"input-list\">\n        {inputList.map((item) => (// iterates over each item in the inputList array.\n         // `item.id` comes from the `id` property of each object in the `inputList` state array,\n        //key prop uses it for each <li> element to optimize list rendering and updates.\n         <li key={item.id} className=\"input-list li\">\n      {/* Displays the text of the movie */}\n      <span>{item.text}</span>\n            <div className=\"button-container\">\n              <button className=\"play-button\" onClick={() => handleSearchMovie(item.text)}>\n              <span className=\"material-symbols-outlined\">slideshow</span> </button>\n              <button className=\"remove-button\" onClick={() => handleRemove(item.id)}> \n                 <span className=\"material-symbols-outlined\">remove_selection</span> </button>\n              <button className=\"edit-button\" onClick={() => handleEdit(item.id)}>\n              <span className=\"material-symbols-outlined\">edit_square</span> </button>\n              <button className=\"reviews-button\" onClick={() => handleMovieReviews(item.text)}>\n              <span className=\"material-symbols-outlined\">reviews</span> </button>\n            </div>\n        {/* Edit form (only visible when editing an item) */}\n        {editId && (\n        <form className=\"edit-form\" onSubmit={handleEditSubmit}>\n          <input\n            type=\"text\"\n            value={editText}//<input> binds to editText state var React manages and update\n            onChange={(e) => setEditText(e.target.value)}// Updates editText state as the user types\n            placeholder=\"Edit Movie\"\n            className=\"edit-input-box\"\n          />\n          <button type=\"submit\" className=\"edit-submit-button\">Submit Edit</button>\n          <button type=\"button\" className=\"cancel-button\" onClick={handleEditCancel}>Cancel</button>\n        </form>\n        )}\n        </li>\n        ))}\n      </ul>\n  {/* Saved Lists Modal - Displays a modal for selecting or editing saved lists */}\n{showSavedListsModal && (\n    <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n            <h2>My StreamLists</h2>\n\n            {/* Button to toggle between edit and view modes for saved lists */}\n            <button onClick={handleEditSavedLists}>\n                {editSavedLists ? 'Done Editing' : 'Edit Lists'}\n            </button>\n\n            {/* List of saved lists */}\n            <ul>\n                {Array.isArray(savedLists) && savedLists.length > 0 ? (\n                    savedLists.map((list, index) => (\n                        <li key={index} className=\"saved-list-item\">\n                            {/* Button to select list, styled to show text */}\n                            <button \n                                className=\"saved-list-name\" \n                                onClick={() => handleSelectSavedList(list)}\n                            >\n                                {list.name}\n                            </button>\n\n                            {/* Edit and remove options when in edit mode */}\n                            {editSavedLists && (\n                                <div className=\"button-container\">\n                                    <button \n                                        className=\"saved-list-button\" \n                                        onClick={() => handleRemoveSavedList(list.id)}\n                                    >\n                                        <span className=\"material-symbols-outlined\">remove_selection</span>\n                                    </button>\n                                </div>\n                            )}\n                        </li>\n                    ))\n                ) : (\n                    <p>No saved lists available</p>\n                )}\n            </ul>\n\n{/* Close button to exit the modal and return to the main view */}\n<button onClick={() => setShowSavedListsModal(false)}>Close</button>\n\n        </div>\n    </div>\n)}\n\n\n    </div>\n  );\n};\n\nexport default StreamList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}